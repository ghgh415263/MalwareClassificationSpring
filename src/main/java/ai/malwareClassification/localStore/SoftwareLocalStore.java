package ai.malwareClassification.localStore;

import ai.malwareClassification.localStore.exception.FileNotTransferedException;
import ai.malwareClassification.localStore.exception.WrongUrlException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.io.Resource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Component;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;


@RequiredArgsConstructor
@Slf4j
@Component
public class SoftwareLocalStore {

    private final FilenameGenerator filenameGenerator;
    @Value("${software.store.dir}")
    private String softwareStoreDir;

    public String save(MultipartFile multipartFile){

        if (multipartFile.isEmpty()) {
            return null;
        }

        String storeFileName = filenameGenerator.createStoreFileName(multipartFile.getOriginalFilename());
        String fullPath = createFullPath(storeFileName);
        try{
            multipartFile.transferTo(new File(fullPath));
            return storeFileName;
        }
        catch(IOException ioException) {
            throw new FileNotTransferedException(ioException);
        }
    }

    public Resource getResource(String filename) {
        String fullPath = createFullPath(filename);
        try {
            UrlResource urlResource = new UrlResource("file:" + fullPath);
            return urlResource;
        }
        catch(MalformedURLException e) {
            throw new WrongUrlException(e);
        }
    }

    public String createFullPath(String filename) {
        return softwareStoreDir + filename;
    }
}
