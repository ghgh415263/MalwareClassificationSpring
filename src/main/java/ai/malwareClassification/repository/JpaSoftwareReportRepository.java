package ai.malwareClassification.repository;

import ai.malwareClassification.domain.QSoftwareReport;
import ai.malwareClassification.domain.QUser;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareReport;
import com.querydsl.jpa.impl.JPAQueryFactory;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.CollectionUtils;

import javax.persistence.EntityManager;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Slf4j
@Repository
public class JpaSoftwareReportRepository {

    private final EntityManager em;
    private final JPAQueryFactory query;

    public JpaSoftwareReportRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    public SoftwareReport save(SoftwareReport softwareReport) {
        em.persist(softwareReport);
        return softwareReport;
    }

    public Optional<SoftwareReport> findById(Long id) {
        SoftwareReport softwareReport = em.find(SoftwareReport.class, id);
        return Optional.ofNullable(softwareReport);
    }

    public List<SoftwareReport> findAllBySoftwareId(Long SoftwareId, Pageable pageable) {

        List<Long> idList = query
                .select(QSoftwareReport.softwareReport.id)
                .from(QSoftwareReport.softwareReport)
                .where(QSoftwareReport.softwareReport.software.id.eq(SoftwareId))
                .orderBy(QSoftwareReport.softwareReport.createdTime.desc())
                .limit(pageable.getPageSize())
                .offset(pageable.getOffset())
                .fetch();

        if (CollectionUtils.isEmpty(idList)) {
            return new ArrayList<>();
        }

        return query
                .select(QSoftwareReport.softwareReport)
                .from(QSoftwareReport.softwareReport)
                .where(QSoftwareReport.softwareReport.id.in(idList))
                .orderBy(QSoftwareReport.softwareReport.id.desc())
                .fetch(); // where in id만 있어 결과 정렬이 보장되지 않는다.
    }

    public Long countBySoftwareId(Long softwareId) {
        return (Long) em.createQuery("select count(sr) from SoftwareReport sr where sr.software.id = :softwareId").setParameter("softwareId", softwareId).getSingleResult();
    }

}
