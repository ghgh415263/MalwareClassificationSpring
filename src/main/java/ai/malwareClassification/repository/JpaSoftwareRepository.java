package ai.malwareClassification.repository;

import ai.malwareClassification.controller.mainController.SearchDto;
import ai.malwareClassification.domain.QSoftware;
import ai.malwareClassification.domain.QUser;
import ai.malwareClassification.domain.Software;
import com.querydsl.core.BooleanBuilder;
import com.querydsl.jpa.impl.JPAQueryFactory;
import io.netty.util.internal.StringUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Repository;
import org.springframework.util.StringUtils;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import java.util.List;
import java.util.Optional;

@Slf4j
@Repository
public class JpaSoftwareRepository implements SoftwareRepository{

    private final EntityManager em;
    private final JPAQueryFactory query;

    public JpaSoftwareRepository(EntityManager em){
        this.em = em;
        this.query = new JPAQueryFactory(em);
    }

    @Override
    public Optional<Software> findById(long id) {
        return Optional.ofNullable(em.find(Software.class, id));
    }

    @Override
    public Optional<Software> findBySignature(String signature) {
        List<Software> result = em.createQuery("select s from Software s where s.signature = :signature", Software.class).setParameter("signature", signature).getResultList();
        return result.stream().findAny();
    }

    @Override
    public Software save(Software software) {
        em.persist(software);
        return software;
    }

    @Override
    public Page<Software> findAll(Pageable pageable) {
        List<Software> result = em.createQuery("select s from Software s order by s.createdTime desc", Software.class).setMaxResults(pageable.getPageSize()).setFirstResult((int)pageable.getOffset()).getResultList();
        Query query = em.createQuery("select count(s) from Software s");
        return new PageImpl<>(result, pageable, (Long)query.getSingleResult());
    }

    @Override
    public Page<Software> findAllByUploader(Pageable pageable, String keyword) {
        List<Software> result = em.createQuery("select s from Software s LEFT OUTER JOIN User u ON s.uploader.id=u.id where u.username like '%" + keyword + "%' order by s.createdTime desc", Software.class).setMaxResults(pageable.getPageSize()).setFirstResult((int)pageable.getOffset()).getResultList();
        Query query = em.createQuery("select count(s) from Software s LEFT OUTER JOIN User u ON s.uploader.id=u.id where u.username like '%" + keyword+ "%'");
        return new PageImpl<>(result, pageable, (Long)query.getSingleResult());
    }

    @Override
    public Page<Software> findAllByNickname(Pageable pageable, String keyword) {
        List<Software> result = em.createQuery("select s from Software s where s.nickname like '%" + keyword + "%' order by s.createdTime desc", Software.class).setMaxResults(pageable.getPageSize()).setFirstResult((int)pageable.getOffset()).getResultList();
        Query query = em.createQuery("select count(s) from Software s where s.nickname like '%" + keyword+ "%'");
        return new PageImpl<>(result, pageable, (Long)query.getSingleResult());
    }

    @Override
    public Page<Software> findAllByFilename(Pageable pageable, String keyword) {
        List<Software> result = em.createQuery("select s from Software s where s.filename like '%" + keyword + "%' order by s.createdTime desc", Software.class).setMaxResults(pageable.getPageSize()).setFirstResult((int)pageable.getOffset()).getResultList();
        Query query = em.createQuery("select count(s) from Software s where s.filename like '%" + keyword+ "%'");
        return new PageImpl<>(result, pageable, (Long)query.getSingleResult());
    }


    @Override
    public void updateNickname(Long id, String newNickname) {
        em.createQuery("update Software s set s.nickname = :nickname where s.id = :id").setParameter("nickname", newNickname).setParameter("id",id).executeUpdate();
    }

    @Override
    public void deleteById(Software software){
        em.remove(software);
    };

    public List<Software> findAll(SearchDto searchDto) {
        String filename = searchDto.getFilename();
        String nickname = searchDto.getNickname();
        String username = searchDto.getUsername();

        BooleanBuilder builder = new BooleanBuilder();
        if (StringUtils.hasText(filename)) {
            builder.and(QSoftware.software.filename.like("%"+filename+"%"));
        }
        if (StringUtils.hasText(nickname)) {
            builder.and(QSoftware.software.nickname.like("%"+nickname+"%"));
        }
        if (StringUtils.hasText(username)) {
            builder.and(QUser.user.username.like("%"+username+"%"));
        }

        List<Software> result = query
                .select(QSoftware.software)
                .from(QSoftware.software)
                .join(QSoftware.software.uploader, QUser.user)
                .where(builder)
                .fetch();

        return result;
    }

}