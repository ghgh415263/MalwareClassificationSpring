package ai.malwareClassification.repository;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareBehavior;
import ai.malwareClassification.domain.SoftwarePurpose;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;

import javax.persistence.EntityManager;
import javax.persistence.Query;
import java.util.List;
import java.util.Optional;

public class JpaSoftwareRepository implements SoftwareRepository{

    private final EntityManager em;

    public JpaSoftwareRepository(EntityManager em) {
        this.em = em;
    }

    @Override
    public Optional<Software> findById(long id){
        Software software = em.find(Software.class, id); //PK는 이런식으로 찾게 할 수 있음
        return Optional.ofNullable(software);
    }

    @Override
    public Optional<Software> findBySignature(String signature) {
        List<Software> result = em.createQuery("select s from Software s where s.signature = :signature", Software.class).setParameter("signature", signature).getResultList();
        return result.stream().findAny();
    }

    @Override
    public Software save(Software software){
        em.persist(software);
        return software;
    }

    @Override
    public SoftwarePurpose save(SoftwarePurpose softwarePurpose){
        em.persist(softwarePurpose);
        return softwarePurpose;
    }

    @Override
    public SoftwareBehavior save(SoftwareBehavior softwareBehavior){
        em.persist(softwareBehavior);
        return softwareBehavior;
    }

    @Override
    public List<SoftwarePurpose> purposesFindBySoftwareId(Long software_id){
        List<SoftwarePurpose> result = em.createQuery("select s from SoftwarePurpose s where s.software_id = :software_id", SoftwarePurpose.class).setParameter("software_id", software_id).getResultList();
        return result;
    }

    @Override
    public List<SoftwareBehavior> behaviorsFindBySoftwareId(Long software_id){
        List<SoftwareBehavior> result = em.createQuery("select s from SoftwareBehavior s where s.software_id = :software_id", SoftwareBehavior.class).setParameter("software_id", software_id).getResultList();
        return result;
    }

    @Override
    public Optional<SoftwarePurpose> purposeFindById(Long id){
        List<SoftwarePurpose> result = em.createQuery("select s from SoftwarePurpose s where s.id = :id", SoftwarePurpose.class).setParameter("id", id).getResultList();
        return result.stream().findAny();
    }

    @Override
    public Optional<SoftwareBehavior> behaviorFindById(Long id){
        List<SoftwareBehavior> result = em.createQuery("select s from SoftwareBehavior s where s.id = :id", SoftwareBehavior.class).setParameter("id", id).getResultList();
        return result.stream().findAny();
    }

    @Override
    public Page<Software> findAll(Pageable pageable){
        //List<Software> result = em.createQuery("select s from Software s order by s.find_datetime limit 20 offset :offset", Software.class).setParameter("offset", pageable.getOffset()).getResultList();
        List<Software> result = em.createQuery("select s from Software s order by s.find_datetime desc", Software.class).setMaxResults(pageable.getPageSize()).setFirstResult((int)pageable.getOffset()).getResultList();
        Query query = em.createQuery("select count(s) from Software s");
        return new PageImpl<>(result, pageable, (Long)query.getSingleResult());
    }


    @Override
    public Page<Software> findAllBySearch(Pageable pageable, String searchText, String searchBy) {
        List<Software> result = em.createQuery("select s from Software s where s." + searchBy + " like '%" + searchText+ "%' order by s.find_datetime desc", Software.class).setMaxResults(pageable.getPageSize()).setFirstResult((int)pageable.getOffset()).getResultList();
        Query query = em.createQuery("select count(s) from Software s where s." + searchBy + " like '%" + searchText+ "%'");
        return new PageImpl<>(result, pageable, (Long)query.getSingleResult());
    }

    @Override
    public void updateNickname(Long id, String newNickname){
        em.createQuery("update Software s set s.nickname = :nickname where s.id = :id").setParameter("nickname", newNickname).setParameter("id",id).executeUpdate();
    }
    @Override
    public void deleteSignature(Long id){
        em.createQuery("delete from Software s where s.id = :id").setParameter("id",id).executeUpdate();
    }

}