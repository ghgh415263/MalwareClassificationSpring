package ai.malwareClassification.controller;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.dto.NewfileDTO;
import ai.malwareClassification.service.Service;
import ai.malwareClassification.service.SaveSignatureAndFileDTO;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.ConstraintViolationException;
import javax.validation.Valid;
import java.nio.file.AccessDeniedException;

@Slf4j
@Controller
public class uploadSignatureController {

    private Service Service;

    public uploadSignatureController(Service Service){
        this.Service = Service;
    }

    @GetMapping("main/form")
    public String form(Authentication authentication) throws Exception{
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        if (userDetails.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"))) {
            throw new AccessDeniedException("권한 없음");
        }
        return "form";
    }

    @PostMapping("/newfile")
    public String uploadSingle(@Valid NewfileDTO newfileDTO, Authentication authentication, Model model) throws Exception {
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        if (userDetails.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"))) {
            throw new AccessDeniedException("권한 없음");
        }
        SaveSignatureAndFileDTO saveSignatureAndFile = Service.saveSignatureAndFile(newfileDTO, userDetails);

        return "redirect:/signature/"+saveSignatureAndFile.getSignature();
    }

    @ExceptionHandler(AccessDeniedException.class)
    public String exceptionHandler(Model model, Exception e){
        model.addAttribute("exception", e.getMessage());
        return "error/noResource";
    }

    @ExceptionHandler(ConstraintViolationException.class)
    public String exceptionHandler(Exception e, RedirectAttributes redirectAttributes){
        redirectAttributes.addFlashAttribute("exception", e.getMessage());
        return "redirect:/main/form";
    }
}
