package ai.malwareClassification.controller;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.loginReqParamDTO.NewfileDTO;
import ai.malwareClassification.exception.NoAttachedFileException;
import ai.malwareClassification.service.MyService;
import ai.malwareClassification.service.SaveSignatureAndFileDTO;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.nio.file.AccessDeniedException;

@Slf4j
@Controller
public class uploadSignatureController {


    private MyService MyService;
    public uploadSignatureController(MyService MyService){
        this.MyService = MyService;
    }

    @GetMapping("main/form")
    public String form(Authentication authentication) throws Exception{
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        if (userDetails.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"))) {
            throw new AccessDeniedException("권한 없음");
        }
        return "form";
    }

    @PostMapping("/newfile")
    public String uploadSingle(NewfileDTO newfileDTO, Authentication authentication) throws Exception {
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        if (userDetails.getAuthorities().contains(new SimpleGrantedAuthority("ADMIN"))) {
            throw new AccessDeniedException("권한 없음");
        }
        if (newfileDTO.getFile().getSize() == 0){
            throw new NoAttachedFileException("첨부파일이 없음");
        }
        SaveSignatureAndFileDTO saveSignatureAndFile = MyService.saveSignatureAndFile(newfileDTO, userDetails);

        return "redirect:/signature/"+saveSignatureAndFile.getSignature();
    }

    @ExceptionHandler(AccessDeniedException.class)
    public String exceptionHandler(Model model, Exception e){
        model.addAttribute("exception", e.getMessage());
        return "error/noResource";
    }

    @ExceptionHandler(NoAttachedFileException.class)
    public String exceptionHandler(Exception e, RedirectAttributes redirectAttributes){
        redirectAttributes.addFlashAttribute("exception", e.getMessage());
        return "redirect:/main/form";
    }
}
