package ai.malwareClassification.controller;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.exception.NoAttachedFileException;
import ai.malwareClassification.service.SoftwareSaveService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.nio.file.AccessDeniedException;

@RequiredArgsConstructor
@Slf4j
@Controller
public class uploadSignatureController {
    private final SoftwareSaveService softwareSaveService;

    @GetMapping("main/form")
    public String uploadfile (Authentication authentication) throws Exception{

        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        return "form";
    }

    @PostMapping("/newfile")
    public String uploadfile (MultipartFile file, Authentication authentication, RedirectAttributes redirectAttributes) throws Exception {
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        if (file.getSize() == 0){
            redirectAttributes.addFlashAttribute("uploadfile","fail");
            return "main/form";
            //throw new NoAttachedFileException("첨부파일이 없음");
        }
        Long savedSoftwareId = softwareSaveService.saveSoftwareAndFile(file, userDetails);

        redirectAttributes.addFlashAttribute("uploadfile","success");
        return "redirect:/software/"+savedSoftwareId;
    }

    @ExceptionHandler(NoAttachedFileException.class)
    public String exceptionHandler (Exception e, RedirectAttributes redirectAttributes){
        redirectAttributes.addFlashAttribute("exception", e.getMessage());
        return "redirect:/main/form";
    }
}
