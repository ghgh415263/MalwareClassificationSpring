package ai.malwareClassification.controller.main;

import ai.malwareClassification.controller.main.reqParamDTO.SearchByCategoryAndText;
import ai.malwareClassification.controller.main.resParamDTO.softwareForPaging;
import ai.malwareClassification.service.SoftwarePageableService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindException;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;

@RequiredArgsConstructor
@Slf4j
@Controller
@RequestMapping(value = "/main")
public class mainController {

    private final SoftwarePageableService softwarePageService;

    @GetMapping("")
    public String softWareList (Model model) {
        Page<softwareForPaging> DtoPaging = softwarePageService.findSoftWareList(0);
        model.addAttribute("paging", DtoPaging);
        return "main";
    }

    @GetMapping("/search")
    public String softWareListBySearch (@ModelAttribute @Valid final SearchByCategoryAndText searchByCategoryAndText, Model model) {
        Page<softwareForPaging> DtoPaging = softwarePageService.findSoftWareListBySearch(searchByCategoryAndText);
        model.addAttribute("paging", DtoPaging);
        model.addAttribute("searchCategory", searchByCategoryAndText.getSearchCategory());
        model.addAttribute("searchText", searchByCategoryAndText.getSearchText());
        return "main";
    }
    @ExceptionHandler(BindException.class)
    public String wrongSearchHandler (Exception e, RedirectAttributes redirectAttributes){
        log.error("exception - {} (Wrong Search attempt)", e.getMessage());
        redirectAttributes.addFlashAttribute("exception","검색어와 검색카테고리를 제데로 설정해주세요.");
        return "redirect:/main";
    }
}
