package ai.malwareClassification.controller.main;

import ai.malwareClassification.controller.main.reqParamDTO.PageNumOfMainSearchDTO;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.service.MyService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.ConstraintViolationException;
import javax.validation.Valid;
import java.net.BindException;

@Slf4j
@Controller
@RequestMapping(value = "/main")
public class mainController {

    private MyService MyService;

    public mainController(MyService MyService){
        this.MyService = MyService;
    }

    @GetMapping("")
    public String mainList(@RequestParam(defaultValue = "0") int PageNum, Model model) {
        Page<Software> paging = MyService.getSoftWareList(PageNum);
        model.addAttribute("paging", paging);
        return "main";
    }

    @GetMapping("/search")
    public String mainListBySearch(@ModelAttribute @Valid final PageNumOfMainSearchDTO pageNumOfMainSearchDTO, Model model) {

        Page<Software> paging = MyService.getListBySearch(pageNumOfMainSearchDTO);
        model.addAttribute("paging", paging);
        model.addAttribute("searchBy", pageNumOfMainSearchDTO.getSearchCategory());
        model.addAttribute("searchText", pageNumOfMainSearchDTO.getSearchText());
        return "main";
    }

    @ExceptionHandler(MethodArgumentNotValidException.class)
    public String exceptionHandler(Exception e, RedirectAttributes redirectAttributes){
        redirectAttributes.addFlashAttribute("exception", e.getMessage());
        return "redirect:/main";
    }
}
