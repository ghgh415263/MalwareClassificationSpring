package ai.malwareClassification.controller.softwareReportController;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.form.Behaviors;
import ai.malwareClassification.controller.form.Purposes;
import ai.malwareClassification.domain.SoftwareReport;
import ai.malwareClassification.service.reportSaveAndDownload.ReportPostDto;
import ai.malwareClassification.service.reportSaveAndDownload.SaveReportService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.Map;

@RequiredArgsConstructor
@Slf4j
@Controller
@RequestMapping(value = "/software")
public class ReportPostController {

    private final SaveReportService saveReportService;

    @GetMapping("/{softwareId}/report-post")
    public String reportPost(@PathVariable Long softwareId, Model model) {
        model.addAttribute("reportPostDto", new ReportPostDto("", "", new LinkedList<String>(), new LinkedList<String>(), null));
        model.addAttribute("softwareId", softwareId);
        model.addAttribute("purposes", Purposes.values());
        model.addAttribute("behaviors", Behaviors.values());
        return "reportPostPage";
    }

    @PostMapping("/{softwareId}/report-post")
    public String reportPost(@PathVariable Long softwareId, @ModelAttribute @Valid ReportPostDto reportPostDto, BindingResult bindingResult, @AuthenticationPrincipal PrincipalDetails principalDetails) {

        MultipartFile multipartFile = reportPostDto.getMultipartFile();
        if (multipartFile.isEmpty()) {
            bindingResult.rejectValue("multipartFile", null, "파일을 첨부하십시요");
        }

        if (bindingResult.hasErrors()) {
            return "reportPostPage";
        }

        SoftwareReport softwareReport = saveReportService.saveSoftwareReport(softwareId, reportPostDto, principalDetails.getloginUser());

        return "redirect:/software/{softwareId}/report/"+softwareReport.getId();
    }
}
