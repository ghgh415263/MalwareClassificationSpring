package ai.malwareClassification.controller.mainController;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.service.SoftwarePageableService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Controller
@RequestMapping(value = "/main")
public class mainController {

    private final SoftwarePageableService softwarePageService;

    @GetMapping("")
    public String softWareList (@PageableDefault(size=2, sort="createdTime",direction = Sort.Direction.DESC) Pageable pageable, Model model) {
        Page<softwareForPagingDto> DtoPaging = softwarePageService.findSoftWareList(pageable).map((software)-> softwareForPagingDto.fromEntity(software));

        PageCustom<softwareForPagingDto> dtoPaging= new PageCustom<softwareForPagingDto>(DtoPaging.getContent(), DtoPaging.getPageable(), DtoPaging.getTotalElements());

        model.addAttribute("paging", dtoPaging);
        model.addAttribute("searchDto", new SearchDto(0,"", ""));
        return "main";
    }

    @GetMapping("/search/uploader")
    public String softwareListSearchByUploader(@ModelAttribute @Valid SearchDto searchDto, BindingResult bindingResult, Model model) {
        Page<Software> paging = softwarePageService.findSoftWareListByUploader(searchDto.getPage(), searchDto.getKeyword());
        Page<softwareForPagingDto> DtoPaging = paging.map((software)-> softwareForPagingDto.fromEntity(software));
        model.addAttribute("paging", DtoPaging);
        model.addAttribute("searchDto", searchDto);
        return "main";
    }

    @GetMapping("/search/nickname")
    public String softwareListSearchByNickname(@ModelAttribute @Valid SearchDto searchDto, BindingResult bindingResult, Model model) {
        Page<Software> paging = softwarePageService.findSoftWareListByNickname(searchDto.getPage(), searchDto.getKeyword());
        Page<softwareForPagingDto> DtoPaging = paging.map((software)-> softwareForPagingDto.fromEntity(software));
        model.addAttribute("paging", DtoPaging);
        model.addAttribute("searchDto", searchDto);
        return "main";
    }

    @GetMapping("/search/filename")
    public String softwareListSearchByFilename(@ModelAttribute @Valid SearchDto searchDto, BindingResult bindingResult, Model model) {
        Page<Software> paging = softwarePageService.findSoftWareListByFilename(searchDto.getPage(), searchDto.getKeyword());
        Page<softwareForPagingDto> DtoPaging = paging.map((software)-> softwareForPagingDto.fromEntity(software));
        model.addAttribute("paging", DtoPaging);
        model.addAttribute("searchDto", searchDto);
        return "main";
    }

    @GetMapping("/searchtest")
    public String softwareListSearch(@ModelAttribute @Valid SearchDto searchDto, @PageableDefault(size=10, sort="id",direction = Sort.Direction.DESC) Pageable pageable, Model model) {
        List<Software> a = softwarePageService.findSoftWareListBySearch(searchDto);
        return "main";
    }
}
