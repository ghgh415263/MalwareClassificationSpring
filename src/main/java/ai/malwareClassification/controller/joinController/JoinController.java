package ai.malwareClassification.controller.joinController;

import ai.malwareClassification.domain.User;
import ai.malwareClassification.service.exception.UniqueKeyDuplicationException;
import ai.malwareClassification.service.userJoinService.UserCheckService;
import ai.malwareClassification.service.userJoinService.UserJoinService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.NotBlank;

@Slf4j
@Controller
@RequiredArgsConstructor
public class JoinController {

    private final UserJoinService userJoinService;
    private final UserCheckService userCheckService;

    private final BCryptPasswordEncoder bCryptPasswordEncoder;

    @GetMapping("/join")
    public String joinPage(Model model) {
        model.addAttribute("userJoinDto", new UserJoinDto("","","",""));
        return "join";
    }

    @PostMapping("/join")
    public String join(@ModelAttribute @Valid UserJoinDto userJoinDto, BindingResult bindingResult) {
        if (bindingResult.hasErrors()) {
            return "join";
        }

        String encodedPassword = bCryptPasswordEncoder.encode(userJoinDto.getPassword());
        User newUser = User.builder()
                .username(userJoinDto.getUsername())
                .password(encodedPassword)
                .department(userJoinDto.getDepartment())
                .role(userJoinDto.getRole())
                .build();

        userJoinService.createUser(newUser);
        return "join";
    }

    @GetMapping("/join/username-check")
    public String checkUsername(@RequestParam @NotBlank String username, BindingResult bindingResult, Model model) {

        if (bindingResult.hasErrors()) {
            return "join";
        }

        try{
            userCheckService.checkUsername(username);
        }
        catch (UniqueKeyDuplicationException e){
            return "join";
        }

        return "join";
    }
}
