package ai.malwareClassification.controller.uploadController;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.service.softwareSaveAndDownload.SoftwareSaveAndDownloadService;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;


@RequiredArgsConstructor
@Slf4j
@Controller
public class SoftwareUploadController {
    private final SoftwareSaveAndDownloadService softwareSaveAndDownloadService;

    @GetMapping("/upload")
    public String uploadfile (Model model) {
        model.addAttribute("softwareUploadDto", new SoftwareUploadDto("", null));
        return "softwareUpload";
    }

    @PostMapping("/upload-post")
    public String uploadfile (@Valid @ModelAttribute SoftwareUploadDto softwareUploadDto, BindingResult bindingResult, @AuthenticationPrincipal PrincipalDetails principalDetails) {

        User loginUser = principalDetails.getloginUser();
        MultipartFile multipartFile = softwareUploadDto.getMultipartFile();

        if (multipartFile.isEmpty()){
            bindingResult.rejectValue("multipartFile", null, "파일을 첨부하십시요");
        }

        if (bindingResult.hasErrors()){
            return "softwareUpload";
        }

        Long savedSoftwareId = softwareSaveAndDownloadService.saveSoftwareAndFile(multipartFile, softwareUploadDto.getNickname(), loginUser);

        return "redirect:/software/"+savedSoftwareId;
    }
}
