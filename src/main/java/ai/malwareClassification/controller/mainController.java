package ai.malwareClassification.controller;

import ai.malwareClassification.controller.dto.MainDTO;
import ai.malwareClassification.controller.dto.MainSearchDTO;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.service.MyService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.Errors;
import org.springframework.validation.FieldError;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.ConstraintViolationException;
import javax.validation.Valid;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Controller
@Validated
public class mainController {

    private MyService MyService;

    public mainController(MyService MyService){
        this.MyService = MyService;
    }

    public Map<String, String> validateHandling(Errors errors) {

        Map<String, String> validatorResult = new HashMap<>();

        for(FieldError error : errors.getFieldErrors())
        {
            String fieldName = String.format("valid_%s",error.getField());
            validatorResult.put(fieldName,error.getDefaultMessage());
        }

        return validatorResult;
    }

    @GetMapping("/main")
    public String MainPage(@Valid MainDTO mainDTO, Model model) {
        Page<Software> paging = MyService.getList(mainDTO);
        model.addAttribute("paging", paging);
        return "main";
    }

    @GetMapping("/main/search")
    public String search(@Valid MainSearchDTO mainSearchDTO, Errors errors , Model model) {

        Page<Software> paging = MyService.getListBySearch(mainSearchDTO);
        model.addAttribute("paging", paging);
        model.addAttribute("searchBy", mainSearchDTO.getSearchBy());
        model.addAttribute("searchText", mainSearchDTO.getSearchText());
        return "main";
    }

    @ExceptionHandler(ConstraintViolationException.class)
    public String exceptionHandler(Exception e, RedirectAttributes redirectAttributes){
        redirectAttributes.addFlashAttribute("exception", e.getMessage());
        return "redirect:/main";
    }
}
