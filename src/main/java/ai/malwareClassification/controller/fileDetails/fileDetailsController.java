package ai.malwareClassification.controller.fileDetails;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.fileDetails.resParamDTO.SoftwareAndReportDTO;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.service.*;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Slf4j
@Controller
public class fileDetailsController {

    private final SoftwareService softwareService;

    @GetMapping("/id/{id}")
    public String findSoftwareDetailsById(@PathVariable("id") Long id, Model model) throws Exception {
        SoftwareAndReportDTO data = softwareService.softwareByid(id);
        model.addAttribute("softwareAndReportDTO", data);    //id로 보고서 찾아야하는데 현재는 시그니처로 찾게 만듬 나중에 바꿔야함
        return "signatureDetails";
    }
    @PostMapping("/id/{id}/newpurpose")
    public String savePurpose(@PathVariable("id") Long id, @RequestParam("purpose") String purpose, @RequestParam("file") MultipartFile file, Authentication authentication) throws Exception {
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        softwareService.SavePurpose(id, purpose, file, userDetails);
        return "redirect:/id/"+id;
    }

    @PostMapping("/id/{id}/newbehavior")
    public String saveBehavior(@PathVariable("id") Long id, @RequestParam("behavior") String behavior, @RequestParam("file") MultipartFile file, Authentication authentication) throws Exception {
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        softwareService.SaveBehavior(id, behavior, file, userDetails);
        return "redirect:/id/"+id;
    }

    @GetMapping("/id/{id}/downloadpurpose")
    public ResponseEntity<Object> downloadPurposeReport(@PathVariable Long id) throws Exception {

        DownloadReportDTO downloadReportDTO = softwareService.DownloadPurposeReport(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment").filename(downloadReportDTO.getFilename()).build());  // 다운로드 되거나 로컬에 저장되는 용도로 쓰이는지를 알려주는 헤더
        return new ResponseEntity<Object>(downloadReportDTO.getResource(), headers, HttpStatus.OK);
    }

    @GetMapping("/id/{id}/downloadbehavior")
    public ResponseEntity<Object> downloadBehaviorReport(@PathVariable Long id) throws Exception {

        DownloadReportDTO downloadReportDTO = softwareService.DownloadBehaviorReport(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment").filename(downloadReportDTO.getFilename()).build());  // 다운로드 되거나 로컬에 저장되는 용도로 쓰이는지를 알려주는 헤더
        return new ResponseEntity<Object>(downloadReportDTO.getResource(), headers, HttpStatus.OK);
    }

    @PatchMapping("/signature/update/{id}")
    public String updateNickname(@PathVariable("id") Long id, @RequestParam("newNickname") String newNickname){
        softwareService.updateNickname(id, newNickname);
        return "redirect:/id/"+id;
    }

    @DeleteMapping("/signature/delete/{id}")
    public String deleteSoftware(@PathVariable("id") Long id, @RequestParam("uploader_name") String uploader_name, @RequestParam("first_name") String first_name, Authentication authentication){
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        if (userDetails.getUsername().equals(uploader_name)){
            softwareService.deleteSoftware(id, first_name);
        }
        else{
            return "redirect:/id/"+id;
        }
        return "redirect:/main";
    }

    @GetMapping("/signature/api1/{signature}")
    public String makeReportByAPI1(@PathVariable("signature") String signature, Model model) throws Exception {
        ReportFromAPI1VO result = softwareService.apiService1(signature).block();
        model.addAttribute("apiName", result.getApiName());
        model.addAttribute("resultList", result.getResultList());
        return "signatureApiResult";
    }


    @ExceptionHandler(ResourceNotFoundException.class)
    public String exceptionHandler(Model model, Exception e){
        model.addAttribute("exception", e.getMessage());
        return "error/noResource";
    }


}