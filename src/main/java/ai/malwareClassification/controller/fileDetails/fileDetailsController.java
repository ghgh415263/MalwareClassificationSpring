package ai.malwareClassification.controller.fileDetails;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.service.*;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Slf4j
@Controller
public class fileDetailsController {

    private final SoftwareService softwareService;

    @GetMapping("/signature/{signature}")
    public String findDetailsBySignature(@PathVariable("signature") String signature, Model model) throws Exception {
        SoftwareFullInfoDTO data = softwareService.ViewSoftwareBySignature(signature);
        model.addAttribute("signature", data.getSignature());
        model.addAttribute("first_name", data.getFirst_name());
        model.addAttribute("uploader_name", data.getUploader_name());
        model.addAttribute("find_datetime", data.getFind_datetime());
        model.addAttribute("nickname", data.getNickname());
        model.addAttribute("purposes", data.getClass_by_purpose());
        model.addAttribute("behaviors", data.getClass_by_behavior());
        return "signatureInfo";
    }

    @PostMapping("/signature/newpurpose")
    public String InsertPurpose(@RequestParam("signature") String signature, @RequestParam("purpose") String purpose, @RequestParam("file") MultipartFile file, Authentication authentication) throws Exception {
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        softwareService.PostPurpose(signature, purpose, file, userDetails);
        return "redirect:/signature/"+signature;
    }

    @PostMapping("/signature/newbehavior")
    public String InsertBehavior(@RequestParam("signature") String signature, @RequestParam("behavior") String behavior, @RequestParam("file") MultipartFile file, Authentication authentication) throws Exception {
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        softwareService.PostBehavior(signature, behavior, file, userDetails);
        return "redirect:/signature/"+signature;
    }

    @GetMapping("/purpose_report_download/{id}")
    public ResponseEntity<Object> PurposeReportDownload(@PathVariable Long id) throws Exception {

        DownloadReportDTO downloadReportDTO = softwareService.DownloadPurposeReport(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment").filename(downloadReportDTO.getFilename()).build());  // 다운로드 되거나 로컬에 저장되는 용도로 쓰이는지를 알려주는 헤더
        return new ResponseEntity<Object>(downloadReportDTO.getResource(), headers, HttpStatus.OK);
    }

    @GetMapping("/behavior_report_download/{id}")
    public ResponseEntity<Object> BehaviorReportDownload(@PathVariable Long id) throws Exception {

        DownloadReportDTO downloadReportDTO = softwareService.DownloadBehaviorReport(id);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment").filename(downloadReportDTO.getFilename()).build());  // 다운로드 되거나 로컬에 저장되는 용도로 쓰이는지를 알려주는 헤더
        return new ResponseEntity<Object>(downloadReportDTO.getResource(), headers, HttpStatus.OK);
    }

    @PatchMapping("/signature/update/{signature}")
    public String updateNickname(@PathVariable("signature") String signature, @RequestParam("newNickname") String newNickname){
        softwareService.updateNickname(signature, newNickname);
        return "redirect:/signature/"+signature;
    }

    @DeleteMapping("/signature/delete/{signature}")
    public String deleteSoftware(@PathVariable("signature") String signature, @RequestParam("uploader_name") String uploader_name, @RequestParam("first_name") String first_name, Authentication authentication){
        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        if (userDetails.getUsername().equals(uploader_name)){
            softwareService.deleteSignature(signature, first_name);
        }
        else{
            return "redirect:/signature/"+signature;
        }
        return "redirect:/main";
    }

    @GetMapping("/signature/api1/{signature}")
    public String makeReportByAPI1(@PathVariable("signature") String signature, Model model) throws Exception {
        ReportFromAPI1VO result = softwareService.apiService1(signature).block();
        model.addAttribute("apiName", result.getApiName());
        model.addAttribute("resultList", result.getResultList());
        return "signatureApiResult";
    }


    @ExceptionHandler(ResourceNotFoundException.class)
    public String exceptionHandler(Model model, Exception e){
        model.addAttribute("exception", e.getMessage());
        return "error/noResource";
    }


}