package ai.malwareClassification.controller.softwareDetailsController;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.softwareDetailsController.reqParamDto.BehaviorReportDto;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.exception.NoAttachedFileException;
import ai.malwareClassification.service.reportSaveAndDownload.BehaviorDownloadService;
import ai.malwareClassification.service.reportSaveAndDownload.BehaviorSaveService;
import ai.malwareClassification.service.reportSaveAndDownload.ReportFileDto;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;

@RequiredArgsConstructor
@Slf4j
@Controller
@RequestMapping(value = "/software")
public class behaviorReportController {
    private final BehaviorSaveService behaviorSaveService;

    private final BehaviorDownloadService behaviorDownloadService;

    @PostMapping("/{id}/behavior")
    public String behaviorSave(@PathVariable Long id, @ModelAttribute @Valid BehaviorReportDto behaviorReportDto, @AuthenticationPrincipal PrincipalDetails principalDetails, RedirectAttributes redirectAttributes) {

        if (behaviorReportDto.hasEmptyFile()){
            throw new NoAttachedFileException("첨부한 파일이 없습니다.");
        }

        User loginUser = principalDetails.getloginUser();
        behaviorSaveService.SaveBehavior(id, behaviorReportDto, loginUser);
        redirectAttributes.addFlashAttribute("behaviorSave","success");
        return "redirect:/software/{id}";
    }

    @GetMapping("/{id}/behavior/{behaviorId}")
    public ResponseEntity<Resource> behaviorReportDownload(@PathVariable Long behaviorId){

        ReportFileDto downloadReportDto = behaviorDownloadService.downloadBehaviorReport(behaviorId);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Disposition", "attachment; filename=" + downloadReportDto.getFilename());
        return new ResponseEntity<>(downloadReportDto.getResource(), headers, HttpStatus.OK);
    }

}
