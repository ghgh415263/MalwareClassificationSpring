package ai.malwareClassification.controller.softwareDetails;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.softwareDetails.reqParamDTO.BehaviorReportDto;
import ai.malwareClassification.controller.softwareDetails.reqParamDTO.PurposeReportDto;
import ai.malwareClassification.controller.softwareDetails.resParamDTO.ReportFileDto;
import ai.malwareClassification.controller.softwareDetails.resParamDTO.SoftwareDetailsDto;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.service.*;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ContentDisposition;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import lombok.extern.slf4j.Slf4j;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.validation.Valid;
import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Controller
@RequestMapping(value = "/software")
public class SoftwareDetailsController {

    private final SoftwareService softwareService;
    private final SoftwareAnalysisApiService softwareAnalysisApiService;

    @GetMapping("/{id}")
    public String softwareDetailsById(@PathVariable Long id, Model model){

        SoftwareDetailsDto data = softwareService.softwareByid(id);
        model.addAttribute("softwareDetailsDTO", data);
        return "softwareDetails";
    }

    @PatchMapping("/{id}")
    public String softwareNicknameModify(@PathVariable Long id, @RequestParam String newNickname, RedirectAttributes redirectAttributes){

        softwareService.updateNickname(id, newNickname);
        redirectAttributes.addFlashAttribute("softwareNicknameModify","success");
        return "redirect:/software/{id}";
    }

    @DeleteMapping("/{id}")
    public String softwareRemove(@PathVariable Long id, @RequestParam String uploader_name, Authentication authentication, RedirectAttributes redirectAttributes){

        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        if (userDetails.getUsername().equals(uploader_name)){
            softwareService.deleteSoftware(id);
            redirectAttributes.addFlashAttribute("softwareRemove","success");
            return "redirect:/main";
        }
        redirectAttributes.addFlashAttribute("softwareRemove","fail");
        return "redirect:/software/{id}";
    }

    @PostMapping("/{id}/purpose")
    public String purposeSave(@PathVariable Long id, @ModelAttribute @Valid PurposeReportDto purposeReportDto, Authentication authentication, RedirectAttributes redirectAttributes){

        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        softwareService.SavePurpose(id, purposeReportDto, userDetails);
        redirectAttributes.addFlashAttribute("purposeSave","success");
        return "redirect:/software/{id}";
    }

    @PostMapping("/{id}/behavior")
    public String behaviorSave(@PathVariable Long id, @ModelAttribute @Valid BehaviorReportDto behaviorReportDto, Authentication authentication, RedirectAttributes redirectAttributes){

        PrincipalDetails userDetails = (PrincipalDetails) authentication.getPrincipal();
        softwareService.SaveBehavior(id, behaviorReportDto, userDetails);
        redirectAttributes.addFlashAttribute("behaviorSave","success");
        return "redirect:/software/{id}";
    }

    @GetMapping("/{id}/purpose/{purposeId}")
    public ResponseEntity<Object> purposeReportDownload(@PathVariable Long purposeId){

        ReportFileDto downloadReportDTO = softwareService.downloadPurposeReport(purposeId);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment").filename(downloadReportDTO.getFilename()).build());  // 다운로드 되거나 로컬에 저장되는 용도로 쓰이는지를 알려주는 헤더
        return new ResponseEntity<Object>(downloadReportDTO.getResource(), headers, HttpStatus.OK);
    }

    @GetMapping("/{id}/behavior/{behaviorId}")
    public ResponseEntity<Object> behaviorReportDownload(@PathVariable Long behaviorId){

        ReportFileDto downloadReportDTO = softwareService.downloadBehaviorReport(behaviorId);
        HttpHeaders headers = new HttpHeaders();
        headers.setContentDisposition(ContentDisposition.builder("attachment").filename(downloadReportDTO.getFilename()).build());  // 다운로드 되거나 로컬에 저장되는 용도로 쓰이는지를 알려주는 헤더
        return new ResponseEntity<Object>(downloadReportDTO.getResource(), headers, HttpStatus.OK);
    }

    @GetMapping("/signature/api1/{signature}")
    public String makeReportByAPI1(@PathVariable String signature, Model model) throws Exception {
        ReportFromAPI1VO result = softwareAnalysisApiService.apiService1(signature).block();
        model.addAttribute("apiName", result.getApiName());
        model.addAttribute("resultList", result.getResultList());
        return "signatureApiResult";
    }


    /*TODO 리다이렉션을 다시 설정할 것*/
    @ExceptionHandler(NoSuchElementException.class)
    public String exceptionHandler(Exception e, RedirectAttributes redirectAttributes){
        log.error("exception - {} (Wrong Access to Software or Report)", e.getMessage());
        redirectAttributes.addFlashAttribute("exception","잘못된 소프트웨어나 보고서에 접근하고 있습니다.");
        return "redirect:/main";
    }

}