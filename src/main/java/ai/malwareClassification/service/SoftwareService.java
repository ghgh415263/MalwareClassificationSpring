package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.softwareDetails.resParamDTO.SoftwareAndReportDTO;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareBehavior;
import ai.malwareClassification.domain.SoftwarePurpose;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.repository.BehaviorRepository;
import ai.malwareClassification.repository.PurposeRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.io.File;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareService {

    private final SoftwareRepository softwareRepository;
    private final PurposeRepository purposeRepository;
    private final BehaviorRepository behaviorRepository;

    @Transactional
    public SoftwareAndReportDTO softwareByid(Long id) throws Exception{
        Software result = softwareRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("해당 id를 가진 software는 존재하지 않음"));

        List<SoftwarePurpose> result1 = purposeRepository.purposesFindBySoftwareId(result.getId());
        List<SoftwareBehavior> result2 = behaviorRepository.behaviorsFindBySoftwareId(result.getId());
        SoftwareAndReportDTO softwareFullInfoDTO = SoftwareAndReportDTO.of(result ,result1, result2);
        return softwareFullInfoDTO;
    }

    @Transactional
    public void SavePurpose(Long id, String purpose, MultipartFile file, PrincipalDetails userDetails) throws Exception{
        Software result = softwareRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("해당 id를 가진 software는 존재하지 않음"));

        String path = LocalStorage.saveInLocalStorage(file, LocalStorage.purpose_path);
        SoftwarePurpose softwarePurpose = new SoftwarePurpose(id, userDetails.getUsername(), purpose, path);
        purposeRepository.save(softwarePurpose);
    }

    @Transactional
    public void SaveBehavior(Long id, String behavior, MultipartFile file, PrincipalDetails userDetails) throws Exception{
        Software result = softwareRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("해당 id를 가진 software는 존재하지 않음"));

        String path = LocalStorage.saveInLocalStorage(file, LocalStorage.behavior_path);
        SoftwareBehavior softwareBehavior = new SoftwareBehavior(id, userDetails.getUsername(), behavior, path);
        behaviorRepository.save(softwareBehavior);
    }

    @Transactional
    public DownloadReportDTO DownloadPurposeReport(Long id) throws Exception{
        SoftwarePurpose softwarePurpose = purposeRepository.purposeFindById(id).orElseThrow(() -> new IllegalStateException("해당 파일은 존재하지 않음"));
        String report_path = softwarePurpose.getReport_path();
        Path filePath = Paths.get(report_path);
        FileSystemResource resource = new FileSystemResource(filePath);
        DownloadReportDTO downloadReportDTO = new DownloadReportDTO(resource, filePath.getFileName().toString());
        return downloadReportDTO;
    }


    @Transactional
    public DownloadReportDTO DownloadBehaviorReport(Long id) throws Exception{
        SoftwareBehavior softwareBehavior = behaviorRepository.behaviorFindById(id).orElseThrow(() -> new IllegalStateException("해당 파일은 존재하지 않음"));
        String report_path = softwareBehavior.getReport_path();
        Path filePath = Paths.get(report_path);
        FileSystemResource resource = new FileSystemResource(report_path);
        DownloadReportDTO downloadReportDTO = new DownloadReportDTO(resource, filePath.getFileName().toString());
        return downloadReportDTO;
    }

    @Transactional
    public void updateNickname(Long id, String newNickname){
        softwareRepository.updateNickname(id, newNickname);
    }

    @Transactional
    public void deleteSoftware(Long id){
        Software result = softwareRepository.findById(id).orElseThrow(() -> new ResourceNotFoundException("해당 id를 가진 software는 존재하지 않음"));
        List<SoftwarePurpose> result1 = purposeRepository.purposesFindBySoftwareId(result.getId());
        List<SoftwareBehavior> result2 = behaviorRepository.behaviorsFindBySoftwareId(result.getId());

        String filePath = result.getPath();
        File file = new File(filePath);
        if( file.exists() ){
            file.delete();
            softwareRepository.deleteSignature(id);
        }

        for(SoftwarePurpose i : result1){
            filePath = i.getReport_path();
            file = new File(filePath);
            if( file.exists() ){
                file.delete();
                purposeRepository.deletePurposeById(id);
            }
        }

        for(SoftwareBehavior i : result2){
            filePath = i.getReport_path();
            file = new File(filePath);
            if( file.exists() ){
                file.delete();
                behaviorRepository.deleteBehaviorById(id);
            }
        }  //연쇄삭제를 강제로 해놓음 (fk를 사용하지 않고 있기 때문)
    }


    @Transactional
    public Mono<ReportFromAPI1VO> apiService1(String signature) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        Software sw = result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        WebClient client = WebClient.builder()
                .baseUrl("http://localhost:80")
                .defaultCookie("cookieKey", "cookieValue")
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .defaultUriVariables(Collections.singletonMap("url", "http://localhost:80"))
                .build();

        MultiValueMap<String, Object> multiValueMap = new LinkedMultiValueMap<>();

        String filePath = sw.getPath();
        Resource resource = new FileSystemResource(filePath);

        multiValueMap.add("file", resource);
        return client.post()
                .uri("/something")
                .contentType(MediaType.MULTIPART_FORM_DATA)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(multiValueMap)
                .retrieve()
                .bodyToMono(ReportFromAPI1VO.class);
    }
}
