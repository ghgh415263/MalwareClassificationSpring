package ai.malwareClassification.service;

import ai.malwareClassification.controller.softwareDetails.resParamDto.SoftwareDetailsDto;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareBehavior;
import ai.malwareClassification.domain.SoftwarePurpose;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.repository.BehaviorRepository;
import ai.malwareClassification.repository.PurposeRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.util.List;
import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareService {

    private final SoftwareRepository softwareRepository;
    private final PurposeRepository purposeRepository;
    private final BehaviorRepository behaviorRepository;

    @Transactional(readOnly = true)
    public SoftwareDetailsDto softwareByid(Long id){

        Software softwareList = softwareRepository.findById(id).orElseThrow(() -> new EntityNotFoundException("The software requested by id does not exist in the database"));

        List<SoftwarePurpose> purposeList = purposeRepository.purposesFindBySoftwareId(softwareList.getId());
        List<SoftwareBehavior> behaviorList = behaviorRepository.behaviorsFindBySoftwareId(softwareList.getId());

        SoftwareDetailsDto softwareDetailsDto = SoftwareDetailsDto.of(softwareList ,purposeList, behaviorList);

        return softwareDetailsDto;
    }

    @Transactional
    public void updateNickname(Long id, String newNickname){
        softwareRepository.updateNickname(id, newNickname);
    }

    @Transactional
    public void deleteSoftware(Long id){
        Software result = softwareRepository.findById(id).orElseThrow(() -> new EntityNotFoundException("The software requested by id does not exist in the database"));
        List<SoftwarePurpose> result1 = purposeRepository.purposesFindBySoftwareId(result.getId());
        List<SoftwareBehavior> result2 = behaviorRepository.behaviorsFindBySoftwareId(result.getId());

        String filePath = result.getPath();
        File file = new File(filePath);
        if( file.exists() ){
            file.delete();
            softwareRepository.deleteSignature(id);
        }

        for(SoftwarePurpose i : result1){
            filePath = i.getReport_path();
            file = new File(filePath);
            if( file.exists() ){
                file.delete();
                purposeRepository.deletePurposeById(id);
            }
        }

        for(SoftwareBehavior i : result2){
            filePath = i.getReport_path();
            file = new File(filePath);
            if( file.exists() ){
                file.delete();
                behaviorRepository.deleteBehaviorById(id);
            }
        }  //연쇄삭제를 강제로 해놓음 (fk를 사용하지 않고 있기 때문)
    }
}
