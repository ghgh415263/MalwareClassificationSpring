package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareBehavior;
import ai.malwareClassification.domain.SoftwarePurpose;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareService {

    private final SoftwareRepository softwareRepository;

    private String saveLocalStorage(MultipartFile file, String signature, String path){
        String uploadFilename = signature + '_' + file.getOriginalFilename();

        if (!path.equals(LocalStorage.tmp_path)){
            String uuid = UUID.randomUUID().toString();
            uploadFilename = uuid + '_' + uploadFilename;
        }

        String filePath = path + uploadFilename; //경로

        File dest = new File(filePath);
        try {
            file.transferTo(dest); // 파일 업로드 작업 수행
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return filePath;
    }

    @Transactional
    public void deleteSignature(String signature, String first_name){
        String fileName = signature + "_" + first_name;
        String filePath = LocalStorage.tmp_path + "/" + fileName;

        File file = new File(filePath);
        if( file.exists() ){
            file.delete();
            softwareRepository.deleteSignature(signature);
        }
    }


    @Transactional
    public SoftwareFullInfoDTO ViewSoftwareBySignature(String signature) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        List<SoftwarePurpose> result1 = softwareRepository.purposesFindBySignature(signature);
        List<SoftwareBehavior> result2 = softwareRepository.behaviorsFindBySignature(signature);
        SoftwareFullInfoDTO softwareFullInfoDTO = new SoftwareFullInfoDTO(result.get().getSignature(), result.get().getFirst_name(), result.get().getUploader_name(), result.get().getNickname(), result.get().getFind_datetime() ,result1, result2);
        return softwareFullInfoDTO;
    }

    @Transactional
    public void PostPurpose(String signature, String purpose, MultipartFile file, PrincipalDetails userDetails) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        String path = saveLocalStorage(file, signature, LocalStorage.purpose_path);
        SoftwarePurpose softwarePurpose = new SoftwarePurpose(signature, userDetails.getUsername(), purpose, path);
        softwareRepository.save(softwarePurpose);
    }

    @Transactional
    public void PostBehavior(String signature, String behavior, MultipartFile file, PrincipalDetails userDetails) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        String path = saveLocalStorage(file, signature, LocalStorage.behavior_path);
        SoftwareBehavior softwareBehavior = new SoftwareBehavior(signature, userDetails.getUsername(), behavior, path);
        softwareRepository.save(softwareBehavior);
    }

    @Transactional
    public DownloadReportDTO DownloadPurposeReport(Long id) throws Exception{
        Optional<SoftwarePurpose> result = softwareRepository.purposeFindById(id);
        SoftwarePurpose softwarePurpose = result.orElseThrow(() -> new IllegalStateException("해당 파일은 존재하지 않음"));
        String report_path = softwarePurpose.getReport_path();
        Path filePath = Paths.get(report_path);
        FileSystemResource resource = new FileSystemResource(report_path);
        DownloadReportDTO downloadReportDTO = new DownloadReportDTO(resource, filePath.getFileName().toString());
        return downloadReportDTO;
    }


    @Transactional
    public DownloadReportDTO DownloadBehaviorReport(Long id) throws Exception{
        Optional<SoftwareBehavior> result = softwareRepository.behaviorFindById(id);
        SoftwareBehavior softwareBehavior = result.orElseThrow(() -> new IllegalStateException("해당 파일은 존재하지 않음"));
        String report_path = softwareBehavior.getReport_path();
        Path filePath = Paths.get(report_path);
        FileSystemResource resource = new FileSystemResource(report_path);
        DownloadReportDTO downloadReportDTO = new DownloadReportDTO(resource, filePath.getFileName().toString());
        return downloadReportDTO;
    }

    @Transactional
    public void updateNickname(String signature, String newNickname){
        softwareRepository.updateNickname(signature, newNickname);
    }


    @Transactional
    public Mono<ReportFromAPI1VO> apiService1(String signature) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        Software sw = result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        WebClient client = WebClient.builder()
                .baseUrl("http://localhost:80")
                .defaultCookie("cookieKey", "cookieValue")
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .defaultUriVariables(Collections.singletonMap("url", "http://localhost:80"))
                .build();

        MultiValueMap<String, Object> multiValueMap = new LinkedMultiValueMap<>();

        String filePath = sw.getPath();
        Resource resource = new FileSystemResource(filePath);

        multiValueMap.add("file", resource);
        return client.post()
                .uri("/something")
                .contentType(MediaType.MULTIPART_FORM_DATA)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(multiValueMap)
                .retrieve()
                .bodyToMono(ReportFromAPI1VO.class);
    }
}
