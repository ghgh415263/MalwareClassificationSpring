package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.softwareDetails.reqParamDTO.BehaviorReportDto;
import ai.malwareClassification.controller.softwareDetails.reqParamDTO.PurposeReportDto;
import ai.malwareClassification.controller.softwareDetails.resParamDTO.ReportFileDto;
import ai.malwareClassification.controller.softwareDetails.resParamDTO.SoftwareDetailsDto;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareBehavior;
import ai.malwareClassification.domain.SoftwarePurpose;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.localSecondaryMemory.LocalMemoryUtils;
import ai.malwareClassification.repository.BehaviorRepository;
import ai.malwareClassification.repository.PurposeRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.FileSystemResource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.util.List;
import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareService {

    private final SoftwareRepository softwareRepository;
    private final PurposeRepository purposeRepository;
    private final BehaviorRepository behaviorRepository;

    @Transactional(readOnly = true)
    public SoftwareDetailsDto softwareByid(Long id){

        Software softwareList = softwareRepository.findById(id).orElseThrow(() -> new NoSuchElementException("해당 id를 가진 software는 존재하지 않음"));

        List<SoftwarePurpose> purposeList = purposeRepository.purposesFindBySoftwareId(softwareList.getId());
        List<SoftwareBehavior> behaviorList = behaviorRepository.behaviorsFindBySoftwareId(softwareList.getId());

        SoftwareDetailsDto softwareDetailsDto = SoftwareDetailsDto.of(softwareList ,purposeList, behaviorList);

        return softwareDetailsDto;
    }

    @Transactional
    public void SavePurpose(Long softwareId, PurposeReportDto purposeReportDto, PrincipalDetails userDetails){

        softwareRepository.findById(softwareId).orElseThrow(() -> new NoSuchElementException("해당 id를 가진 software는 존재하지 않음"));

        String path = LocalMemoryUtils.savePurposeInLocalMemory(purposeReportDto.getFile());
        SoftwarePurpose softwarePurpose = SoftwarePurpose.builder()
                .file_name(purposeReportDto.getFile().getOriginalFilename())
                .software_id(softwareId)
                .checker_name(userDetails.getUsername())
                .report_path(path)
                .purpose(purposeReportDto.getPurpose()).build();

        purposeRepository.save(softwarePurpose);
    }

    @Transactional
    public void SaveBehavior(Long softwareId, BehaviorReportDto behaviorReportDto, PrincipalDetails userDetails){

        softwareRepository.findById(softwareId).orElseThrow(() -> new ResourceNotFoundException("해당 id를 가진 software는 존재하지 않음"));

        String path = LocalMemoryUtils.saveBehaviorInLocalMemory(behaviorReportDto.getFile());
        SoftwareBehavior softwareBehavior = SoftwareBehavior.builder()
                .file_name(behaviorReportDto.getFile().getOriginalFilename())
                .software_id(softwareId)
                .checker_name(userDetails.getUsername())
                .report_path(path)
                .behavior(behaviorReportDto.getBehavior()).build();

        behaviorRepository.save(softwareBehavior);
    }

    @Transactional(readOnly = true)
    public ReportFileDto downloadPurposeReport(Long id){

        SoftwarePurpose softwarePurpose = purposeRepository.purposeFindById(id).orElseThrow(() -> new NoSuchElementException("해당 id를 가진 목적보고서는 존재하지 않음"));

        FileSystemResource resource = new FileSystemResource(softwarePurpose.getReport_path());

        ReportFileDto reportFileDto = new ReportFileDto(resource, softwarePurpose.getFile_name());
        return reportFileDto;
    }


    @Transactional(readOnly = true)
    public ReportFileDto downloadBehaviorReport(Long id){

        SoftwareBehavior softwareBehavior = behaviorRepository.behaviorFindById(id).orElseThrow(() -> new NoSuchElementException("해당 id를 가진 행위보고서는 존재하지 않음"));

        FileSystemResource resource = new FileSystemResource(softwareBehavior.getReport_path());

        ReportFileDto reportFileDto = new ReportFileDto(resource, softwareBehavior.getFile_name());
        return reportFileDto;
    }

    @Transactional
    public void updateNickname(Long id, String newNickname){
        softwareRepository.updateNickname(id, newNickname);
    }

    @Transactional
    public void deleteSoftware(Long id){
        Software result = softwareRepository.findById(id).orElseThrow(() -> new NoSuchElementException("해당 id를 가진 software는 존재하지 않음"));
        List<SoftwarePurpose> result1 = purposeRepository.purposesFindBySoftwareId(result.getId());
        List<SoftwareBehavior> result2 = behaviorRepository.behaviorsFindBySoftwareId(result.getId());

        String filePath = result.getPath();
        File file = new File(filePath);
        if( file.exists() ){
            file.delete();
            softwareRepository.deleteSignature(id);
        }

        for(SoftwarePurpose i : result1){
            filePath = i.getReport_path();
            file = new File(filePath);
            if( file.exists() ){
                file.delete();
                purposeRepository.deletePurposeById(id);
            }
        }

        for(SoftwareBehavior i : result2){
            filePath = i.getReport_path();
            file = new File(filePath);
            if( file.exists() ){
                file.delete();
                behaviorRepository.deleteBehaviorById(id);
            }
        }  //연쇄삭제를 강제로 해놓음 (fk를 사용하지 않고 있기 때문)
    }
}
