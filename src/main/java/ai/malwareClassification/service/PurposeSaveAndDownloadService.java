package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.softwareDetails.reqParamDto.PurposeReportDto;
import ai.malwareClassification.controller.softwareDetails.resParamDto.ReportFileDto;
import ai.malwareClassification.domain.SoftwarePurpose;
import ai.malwareClassification.localStoreComponent.LocalStoreUtils;
import ai.malwareClassification.repository.PurposeRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.FileSystemResource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.io.IOException;
import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Service
public class PurposeSaveAndDownloadService {

    private final SoftwareRepository softwareRepository;
    
    private final PurposeRepository purposeRepository;

    private final LocalStoreUtils localStoreUtils;

    @Transactional
    public void SavePurpose(Long softwareId, PurposeReportDto purposeReportDto, PrincipalDetails userDetails) throws IOException {

        softwareRepository.findById(softwareId).orElseThrow(() -> new NoSuchElementException("해당 id를 가진 software는 존재하지 않음"));

        String path = localStoreUtils.savePurposeInLocalMemory(purposeReportDto.getFile());
        SoftwarePurpose softwarePurpose = SoftwarePurpose.builder()
                .file_name(purposeReportDto.getFile().getOriginalFilename())
                .software_id(softwareId)
                .checker_name(userDetails.getUsername())
                .report_path(path)
                .purpose(purposeReportDto.getPurpose()).build();

        purposeRepository.save(softwarePurpose);
    }

    @Transactional(readOnly = true)
    public ReportFileDto downloadPurposeReport(Long id){
        SoftwarePurpose softwarePurpose = purposeRepository.purposeFindById(id)
                .orElseThrow(() -> new NoSuchElementException("해당 id를 가진 목적보고서는 존재하지 않음"));
        FileSystemResource resource = new FileSystemResource(softwarePurpose.getReport_path());
        ReportFileDto reportFileDto = new ReportFileDto(resource, softwarePurpose.getFile_name());
        return reportFileDto;
    }
}
