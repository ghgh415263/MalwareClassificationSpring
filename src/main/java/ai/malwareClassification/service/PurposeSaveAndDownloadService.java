package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.softwareDetails.reqParamDto.PurposeReportDto;
import ai.malwareClassification.controller.softwareDetails.resParamDto.ReportFileDto;
import ai.malwareClassification.domain.SoftwarePurpose;
import ai.malwareClassification.localStore.PurposeLocalStore;
import ai.malwareClassification.repository.PurposeRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.UrlResource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.util.UriUtils;

import java.nio.charset.StandardCharsets;
import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Service
public class PurposeSaveAndDownloadService {

    private final SoftwareRepository softwareRepository;
    private final PurposeRepository purposeRepository;
    private final PurposeLocalStore purposeLocalStore;

    @Transactional
    public void SavePurpose(Long softwareId, PurposeReportDto purposeReportDto, PrincipalDetails userDetails) {


        softwareRepository.findById(softwareId).orElseThrow(() -> new NoSuchElementException("해당 id를 가진 software는 존재하지 않음"));

        String storeFileName = purposeLocalStore.save(purposeReportDto.getFile());
        SoftwarePurpose softwarePurpose = SoftwarePurpose.builder()
                .file_name(purposeReportDto.getFile().getOriginalFilename())
                .software_id(softwareId)
                .checker_name(userDetails.getUsername())
                .localstore_name(storeFileName)
                .purpose(purposeReportDto.getPurpose()).build();

        purposeRepository.save(softwarePurpose);
    }

    @Transactional(readOnly = true)
    public ReportFileDto downloadPurposeReport(Long id){

        SoftwarePurpose softwarePurpose = purposeRepository.purposeFindById(id)
                .orElseThrow(() -> new NoSuchElementException("해당 id를 가진 목적보고서는 존재하지 않음"));

        String encodedFileName = UriUtils.encode(softwarePurpose.getFile_name(), StandardCharsets.UTF_8);
        String fullPath = purposeLocalStore.createFullPath(softwarePurpose.getLocalstore_name());

        try{
            UrlResource urlResource = new UrlResource("file:" + fullPath);
            ReportFileDto reportFileDto = new ReportFileDto(urlResource, encodedFileName);
            return reportFileDto;
        }
        catch (Exception e){
            throw new NoSuchElementException();
        }
    }
}
