package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.softwareDetails.reqParamDto.BehaviorReportDto;
import ai.malwareClassification.controller.softwareDetails.resParamDto.ReportFileDto;
import ai.malwareClassification.domain.SoftwareBehavior;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.localStore.BehaviorLocalStore;
import ai.malwareClassification.repository.BehaviorRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.util.UriUtils;

import java.nio.charset.StandardCharsets;
import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Service
public class BehaviorSaveAndDownloadService {

    private final SoftwareRepository softwareRepository;
    private final BehaviorRepository behaviorRepository;
    private final BehaviorLocalStore behaviorLocalStore;


    @Transactional
    public void SaveBehavior(Long softwareId, BehaviorReportDto behaviorReportDto, PrincipalDetails userDetails) {


        softwareRepository.findById(softwareId).orElseThrow(() -> new EntityNotFoundException("해당 id를 가진 software는 존재하지 않음"));

        String storeFileName = behaviorLocalStore.save(behaviorReportDto.getFile());
        SoftwareBehavior softwareBehavior = SoftwareBehavior.builder()
                .file_name(behaviorReportDto.getFile().getOriginalFilename())
                .software_id(softwareId)
                .checker_name(userDetails.getUsername())
                .localstore_name(storeFileName)
                .behavior(behaviorReportDto.getBehavior()).build();

        behaviorRepository.save(softwareBehavior);
    }

    @Transactional(readOnly = true)
    public ReportFileDto downloadBehaviorReport(Long id){

        SoftwareBehavior softwareBehavior = behaviorRepository.behaviorFindById(id)
                .orElseThrow(() -> new NoSuchElementException("해당 id를 가진 행위보고서는 존재하지 않음"));

        Resource resource = behaviorLocalStore.getResource(softwareBehavior.getLocalstore_name());
        String encodedFileName = UriUtils.encode(softwareBehavior.getFile_name(), StandardCharsets.UTF_8);
        ReportFileDto reportFileDto = new ReportFileDto(resource, encodedFileName);
        return reportFileDto;  //이녀석은 서비스에 있는게 맞을 듯....
    }
}
