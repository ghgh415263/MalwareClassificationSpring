package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.localStoreComponent.LocalStoreUtils;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Hex;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.security.MessageDigest;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareSaveService {
    private final SoftwareRepository softwareRepository;

    private final LocalStoreUtils localStoreUtils;

    private String createSignature(MultipartFile file) throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        messageDigest.update(file.getBytes());
        String signature = Hex.encodeHexString(messageDigest.digest()); // 시그니처 생성
        return signature;
    }


    @Transactional
    public Long saveSoftwareAndFile(MultipartFile file, PrincipalDetails userDetails) throws Exception {
        String signature = createSignature(file);

        softwareRepository.findBySignature(signature).ifPresent(sw -> {throw new EntityNotFoundException("The software requested by id does not exist in the database");});

        String SavePath = localStoreUtils.saveSoftwareInLocalMemory(file);
        Software software = Software.builder()
                .signature(signature)
                .path(SavePath)
                .first_name(file.getOriginalFilename())
                .uploader_name(userDetails.getUsername())
                .build();

        Software savedSoftware = softwareRepository.save(software);

        return savedSoftware.getId();
    }

}