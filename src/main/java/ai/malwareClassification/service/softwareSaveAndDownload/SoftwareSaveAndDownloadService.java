package ai.malwareClassification.service.softwareSaveAndDownload;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.localStore.StoreManager;
import ai.malwareClassification.repository.SoftwareRepository;
import ai.malwareClassification.service.exception.CannotMakeSignatureException;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Hex;
import org.springframework.core.io.Resource;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.util.UriUtils;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareSaveAndDownloadService {
    private final SoftwareRepository softwareRepository;
    private final StoreManager softwareLocalStore;

    private String createSignature(MultipartFile file) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("MD5");
            messageDigest.update(file.getBytes());
            String signature = Hex.encodeHexString(messageDigest.digest()); // 시그니처 생성
            return signature;
        }
        catch(Exception e) {
            throw new CannotMakeSignatureException(e);
        }
    }


    @Transactional
    public Long saveSoftwareAndFile(MultipartFile file, String nickname, User loginUser){
        String signature = createSignature(file);

        softwareRepository.findBySignature(signature).ifPresent(sw -> {throw new EntityNotFoundException("The software requested by id does not exist in the database");});

        String storeFileName = softwareLocalStore.save(file);
        Software software = Software.builder()
                .signature(signature)
                .localstore_name(storeFileName)
                .file_name(file.getOriginalFilename())
                .uploader(loginUser)
                .nickname(nickname)
                .build();

        Software savedSoftware = softwareRepository.save(software);

        return savedSoftware.getId();
    }

    @Transactional
    public SoftwareFileDto downloadSoftware(Long id){

        Software software = softwareRepository.findById(id)
                .orElseThrow(() -> new NoSuchElementException("해당 id를 가진 소프트웨어는 존재하지 않음"));

        Resource resource = softwareLocalStore.getResource(software.getLocalstore_name());
        String encodedFileName = UriUtils.encode(software.getFile_name(), StandardCharsets.UTF_8);
        SoftwareFileDto softwareFileDto = new SoftwareFileDto(resource, encodedFileName);
        return softwareFileDto;
    }

}