package ai.malwareClassification.service;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.repository.SoftwareRepository;
import ai.malwareClassification.service.apiResponseDto.ReportFromApi1;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.util.Collections;
import java.util.Optional;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareAnalysisApiService {
    private final SoftwareRepository softwareRepository;

    @Transactional
    public Mono<ReportFromApi1> apiService1(Long id) throws Exception{
        Optional<Software> result = softwareRepository.findById(id);
        Software sw = result.orElseThrow(() -> new EntityNotFoundException("해당 시그니처는 존재하지 않음"));

        WebClient client = WebClient.builder()
                .baseUrl("http://localhost:80")
                .defaultCookie("cookieKey", "cookieValue")
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .defaultUriVariables(Collections.singletonMap("url", "http://localhost:80"))
                .build();

        MultiValueMap<String, Object> multiValueMap = new LinkedMultiValueMap<>();

        String filePath = sw.getPath();
        Resource resource = new FileSystemResource(filePath);

        multiValueMap.add("file", resource);
        return client.post()
                .uri("/something")
                .contentType(MediaType.MULTIPART_FORM_DATA)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(multiValueMap)
                .retrieve()
                .bodyToMono(ReportFromApi1.class);
    }
}
