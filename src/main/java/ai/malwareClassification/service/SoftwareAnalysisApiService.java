package ai.malwareClassification.service;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareApiReport;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.localStore.Json.JsonFileLocalStoreUtils;
import ai.malwareClassification.localStore.StoreManager;
import ai.malwareClassification.repository.JpaApiReportRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import ai.malwareClassification.service.apiResponseDto.ApiOutput;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.client.WebClient;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareAnalysisApiService {
    private final SoftwareRepository softwareRepository;
    private final StoreManager softwareLocalStore;
    private final JsonFileLocalStoreUtils jsonFileLocalStoreUtils;
    private final JpaApiReportRepository jpaApiReportRepository;

    @Transactional
    public ApiOutput deepLearningAnalyze(Long id) {
        Software software = softwareRepository.findById(id).orElseThrow(() -> new EntityNotFoundException("엔티티가 존재하지 않음"));

        WebClient client = WebClient.builder()
                .baseUrl("http://localhost:8000")
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .build();

        MultiValueMap<String, Object> multiValueMap = new LinkedMultiValueMap<>();

        String LocalstoreName = software.getLocalstore_name();
        Resource resource = softwareLocalStore.getResource(LocalstoreName);

        multiValueMap.add("file", resource);

        ApiOutput report= client.post()
                .uri("/something")
                .contentType(MediaType.MULTIPART_FORM_DATA)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(multiValueMap)
                .retrieve()
                .bodyToMono(ApiOutput.class)
                .block();

        String jsonFileName = jsonFileLocalStoreUtils.save(report);
        SoftwareApiReport softwareApiReport = SoftwareApiReport.builder().software_id(software.getId()).api_name(report.getApiModelName()).report_name(jsonFileName).build();
        jpaApiReportRepository.save(softwareApiReport);

        return report;
    }
}
