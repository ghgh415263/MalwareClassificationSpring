package ai.malwareClassification.service;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.localStore.StoreManager;
import ai.malwareClassification.repository.SoftwareRepository;
import ai.malwareClassification.service.apiResponseDto.ReportFromApi1;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.Resource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import java.io.File;
import java.io.IOException;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareAnalysisApiService {
    private final SoftwareRepository softwareRepository;
    private final StoreManager softwareLocalStore;

    public Mono<ReportFromApi1> apiService1(Long id){
        Software software = softwareRepository.findById(id).orElseThrow(() -> new EntityNotFoundException("엔티티가 존재하지 않음"));

        WebClient client = WebClient.builder()
                .baseUrl("http://localhost:8000")
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .build();

        MultiValueMap<String, Object> multiValueMap = new LinkedMultiValueMap<>();

        String LocalstoreName = software.getLocalstore_name();
        Resource resource = softwareLocalStore.getResource(LocalstoreName);

        multiValueMap.add("file", resource);

        Mono<ReportFromApi1> report= client.post()
                .uri("/something")
                .contentType(MediaType.MULTIPART_FORM_DATA)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(multiValueMap)
                .retrieve()
                .bodyToMono(ReportFromApi1.class);

        ObjectMapper objectMapper = new ObjectMapper();
        try {
            String reportJson = objectMapper.writeValueAsString(report.block());
            objectMapper.writeValue(new File("C:/workspace/fileDir/tmp/report.json"), reportJson);
            System.out.println(reportJson);
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        return report;
    }
}
