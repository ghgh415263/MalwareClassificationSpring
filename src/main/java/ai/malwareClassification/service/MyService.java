package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Hex;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.security.MessageDigest;
import java.util.Optional;

@RequiredArgsConstructor
@Slf4j
@Service
public class MyService {
    private final SoftwareRepository softwareRepository;

    public String createSignature(MultipartFile file) throws Exception {
        byte[] dataBytes = file.getBytes();
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        messageDigest.update(dataBytes);
        String signature = Hex.encodeHexString(messageDigest.digest()); // 시그니처 생성
        return signature;
    }


    @Transactional
    public Long saveSoftwareAndFile(MultipartFile file, PrincipalDetails userDetails) throws Exception {
        String signature = createSignature(file);
        Optional<Software> result = softwareRepository.findBySignature(signature);
        result.ifPresent(software -> {throw new ResourceNotFoundException("해당 signature를 가진 software는 이미 존재함");});

        String path = LocalStorage.saveInLocalStorage(file, LocalStorage.tmp_path);
        Software software = Software.builder()
                .signature(signature)
                .path(path)
                .first_name(file.getOriginalFilename())
                .uploader_name(userDetails.getUsername())
                .build();

        Software savedSoftware = softwareRepository.save(software);

        return savedSoftware.getId();
    }

}