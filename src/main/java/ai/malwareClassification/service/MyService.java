package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.dto.MainDTO;
import ai.malwareClassification.controller.dto.MainSearchDTO;
import ai.malwareClassification.controller.dto.NewfileDTO;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareBehavior;
import ai.malwareClassification.domain.SoftwarePurpose;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Hex;
import org.springframework.core.io.FileSystemResource;
import org.springframework.core.io.InputStreamResource;
import org.springframework.core.io.Resource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import javax.swing.filechooser.FileSystemView;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.MessageDigest;
import java.util.Collections;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Slf4j
@Service
public class MyService {

    private final ProjectPath projectPath = new ProjectPath();
    private final SoftwareRepository softwareRepository;
    String rootPath = FileSystemView.getFileSystemView().getHomeDirectory().toString();
    public MyService(SoftwareRepository softwareRepository) {
        this.softwareRepository = softwareRepository;
    }

    private String saveLocalStorage(MultipartFile file, String signature, String path){
        String uploadFilename = file.getOriginalFilename();
        uploadFilename = signature + '_' + uploadFilename;

        if (!path.equals(projectPath.getTmp_path())){
            String uuid = UUID.randomUUID().toString();
            uploadFilename = uuid + '_' + uploadFilename;
        }

        String filePath = path + uploadFilename; //경로

        log.info("upload to "+ filePath);
        File dest = new File(filePath);
        try {
            file.transferTo(dest); // 파일 업로드 작업 수행
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        return filePath;

    }

    public String createSignature(MultipartFile file) throws Exception {
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        byte[] dataBytes = file.getBytes();
        messageDigest.update(dataBytes);
        byte[] md5Bytes = messageDigest.digest();
        String signature = Hex.encodeHexString(md5Bytes); // 시그니처 생성
        return signature;
    }


    @Transactional
    public SaveSignatureAndFileDTO saveSignatureAndFile(NewfileDTO newfileDTO, PrincipalDetails userDetails) throws Exception{
        MultipartFile file = newfileDTO.getFile();
        String signature = createSignature(file);
        Optional<Software> result = softwareRepository.findBySignature(signature);
        SaveSignatureAndFileDTO saveSignatureAndFileDTO = new SaveSignatureAndFileDTO(false,signature);
        result.ifPresentOrElse(
                sw -> {
                    saveSignatureAndFileDTO.setInDB(true);
                    log.info("이미 있음");
                    },
                () -> {
                    String path = saveLocalStorage(file, signature, projectPath.getTmp_path());
                    Software software = new Software();
                    software.setSignature(signature);
                    software.setPath(path);
                    software.setFirst_name(file.getOriginalFilename());
                    software.setUploader_name(userDetails.getUsername());
                    software.setNickname(null);
                    softwareRepository.save(software);
                }
        );
        return saveSignatureAndFileDTO;
    }

    @Transactional
    public void deleteSignature(String signature, String first_name){
        String fileName = signature + "_" + first_name;
        String filePath = projectPath.getTmp_path() + "/" + fileName;

        File file = new File(filePath);
        if( file.exists() ){
            file.delete();
            softwareRepository.deleteSignature(signature);
        }
    }


    @Transactional
    public SoftwareFullInfoDTO ViewSoftwareBySignature(String signature) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        List<SoftwarePurpose> result1 = softwareRepository.purposesFindBySignature(signature);
        List<SoftwareBehavior> result2 = softwareRepository.behaviorsFindBySignature(signature);
        SoftwareFullInfoDTO softwareFullInfoDTO = new SoftwareFullInfoDTO(result.get().getSignature(), result.get().getFirst_name(), result.get().getUploader_name(), result.get().getNickname(), result.get().getFind_datetime() ,result1, result2);
        return softwareFullInfoDTO;
    }

    @Transactional
    public void PostPurpose(String signature, String purpose, MultipartFile file, PrincipalDetails userDetails) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        String path = saveLocalStorage(file, signature, projectPath.getPurpose_path());
        SoftwarePurpose softwarePurpose = new SoftwarePurpose(signature, userDetails.getUsername(), purpose, path);
        softwareRepository.save(softwarePurpose);
    }

    @Transactional
    public void PostBehavior(String signature, String behavior, MultipartFile file, PrincipalDetails userDetails) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        String path = saveLocalStorage(file, signature, projectPath.getBehavior_path());
        SoftwareBehavior softwareBehavior = new SoftwareBehavior(signature, userDetails.getUsername(), behavior, path);
        softwareRepository.save(softwareBehavior);
    }

    @Transactional
    public DownloadReportDTO DownloadPurposeReport(Long id) throws Exception{
        Optional<SoftwarePurpose> result = softwareRepository.purposeFindById(id);
        SoftwarePurpose softwarePurpose = result.orElseThrow(() -> new IllegalStateException("해당 파일은 존재하지 않음"));
        String report_path = softwarePurpose.getReport_path();
        Path filePath = Paths.get(report_path);
        FileSystemResource resource = new FileSystemResource(report_path);
        DownloadReportDTO downloadReportDTO = new DownloadReportDTO(resource, filePath.getFileName().toString());
        return downloadReportDTO;
    }


    @Transactional
    public DownloadReportDTO DownloadBehaviorReport(Long id) throws Exception{
        Optional<SoftwareBehavior> result = softwareRepository.behaviorFindById(id);
        SoftwareBehavior softwareBehavior = result.orElseThrow(() -> new IllegalStateException("해당 파일은 존재하지 않음"));
        String report_path = softwareBehavior.getReport_path();
        Path filePath = Paths.get(report_path);
        Resource resource = new InputStreamResource(Files.newInputStream(filePath)); // 파일 resource 얻기
        DownloadReportDTO downloadReportDTO = new DownloadReportDTO(resource, filePath.getFileName().toString());
        return downloadReportDTO;
    }

    @Transactional(readOnly = true)
    public Page<Software> getList(MainDTO mainDTO) {
        Pageable pageable = PageRequest.of(mainDTO.getPage(), 5);
        return softwareRepository.findAll(pageable);
    }

    @Transactional(readOnly = true)
    public Page<Software> getListBySearch(MainSearchDTO mainSearchDTO){
        Pageable pageable = PageRequest.of(mainSearchDTO.getPage(), 5);
        return softwareRepository.findAllBySearch(pageable, mainSearchDTO.getSearchText(), mainSearchDTO.getSearchBy());
    }


    @Transactional
    public void updateNickname(String signature, String newNickname){
        softwareRepository.updateNickname(signature, newNickname);
    }


    @Transactional
    public Mono<ReportFromAPI1VO> apiService1(String signature) throws Exception{
        Optional<Software> result = softwareRepository.findBySignature(signature);
        Software sw = result.orElseThrow(() -> new ResourceNotFoundException("해당 시그니처는 존재하지 않음"));

        WebClient client = WebClient.builder()
                .baseUrl("http://localhost:80")
                .defaultCookie("cookieKey", "cookieValue")
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .defaultUriVariables(Collections.singletonMap("url", "http://localhost:80"))
                .build();

        MultiValueMap<String, Object> multiValueMap = new LinkedMultiValueMap<>();

        String filePath = sw.getPath();
        Resource resource = new FileSystemResource(filePath);

        multiValueMap.add("file", resource);
        return client.post()
                .uri("/something")
                .contentType(MediaType.MULTIPART_FORM_DATA)
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(multiValueMap)
                .retrieve()
                .bodyToMono(ReportFromAPI1VO.class);
    }

}