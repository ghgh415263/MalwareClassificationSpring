package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.NewfileDTO;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Hex;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.security.MessageDigest;
import java.util.Optional;

@RequiredArgsConstructor
@Slf4j
@Service
public class MyService {
    private final SoftwareRepository softwareRepository;

    public String createSignature(MultipartFile file) throws Exception {
        byte[] dataBytes = file.getBytes();
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        messageDigest.update(dataBytes);
        String signature = Hex.encodeHexString(messageDigest.digest()); // 시그니처 생성
        return signature;
    }


    @Transactional
    public SaveSignatureAndFileDTO saveSignatureAndFile(NewfileDTO newfileDTO, PrincipalDetails userDetails) throws Exception {
        MultipartFile file = newfileDTO.getFile();
        String signature = createSignature(file);
        Optional<Software> result = softwareRepository.findBySignature(signature);
        SaveSignatureAndFileDTO saveSignatureAndFileDTO = new SaveSignatureAndFileDTO(false, signature);
        result.ifPresentOrElse(
                sw -> {
                    saveSignatureAndFileDTO.setInDB(true);
                    log.info("이미 있음");
                },
                () -> {
                    String path = LocalStorage.saveInLocalStorage(file, signature, LocalStorage.tmp_path);

                    Software software = new Software();
                    software.setSignature(signature);
                    software.setPath(path);
                    software.setFirst_name(file.getOriginalFilename());
                    software.setUploader_name(userDetails.getUsername());
                    software.setNickname(null);
                    softwareRepository.save(software);
                }
        );
        return saveSignatureAndFileDTO;
    }

}