package ai.malwareClassification.service.softwareDetails;

import ai.malwareClassification.controller.softwareDetailsController.ReportDto;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareReport;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.repository.JpaSoftwareReportRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageImpl;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareService {

    private final SoftwareRepository softwareRepository;

    private final JpaSoftwareReportRepository softwareReportRepository;

    @Transactional(readOnly = true)
    public SoftwareDetailsDto softwareDetailByid(Long id, Pageable pageable){

        Software software = softwareRepository.findById(id).orElseThrow(() -> new EntityNotFoundException("The software requested by id does not exist in the database"));

        List<SoftwareReport> reportList = softwareReportRepository.findAllBySoftwareId(software.getId(), pageable);
        Long count = softwareReportRepository.countBySoftwareId(id);
        Page<ReportDto> paging = new PageImpl<>(reportList, pageable, count).map((report)-> new ReportDto(report));
        SoftwareDetailsDto softwareDetailsDto = new SoftwareDetailsDto(software, paging);
        return softwareDetailsDto;
    }

    @Transactional
    public void updateNickname(Long id, String newNickname){
        softwareRepository.updateNickname(id, newNickname);
    }

    @Transactional
    public void deleteSoftware(Long id){   //TODO 추후 JPA공부가 끝나면 개발해야함
        Software software = softwareRepository.findById(id).orElseThrow(() -> new EntityNotFoundException("The software requested by id does not exist in the database"));
        softwareRepository.deleteById(software);
    }
}
