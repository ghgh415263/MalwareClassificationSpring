package ai.malwareClassification.service.reportSaveAndDownload;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareReport;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.store.StoreManager;
import ai.malwareClassification.repository.JpaSoftwareReportRepository;
import ai.malwareClassification.repository.JpaSoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Service
public class SaveReportService {

    private final JpaSoftwareRepository softwareRepository;

    private final JpaSoftwareReportRepository softwareReportRepository;

    private final StoreManager reportLocalStore;

    @Transactional
    public SoftwareReport saveSoftwareReport(Long softwareId, ReportPostDto reportPostDto, User loginUser) {
        Software software = softwareRepository.findById(softwareId)
                .orElseThrow(() -> new NoSuchElementException("해당 id를 가진 software는 존재하지 않음"));

        MultipartFile multipartFile = reportPostDto.getMultipartFile();
        String storeFileName = reportLocalStore.save(multipartFile);

        SoftwareReport softwareReport = SoftwareReport.builder().software(software).uploader(loginUser)
                .title(reportPostDto.getTitle()).contents(reportPostDto.getContents()).localstoreName(storeFileName).filename(multipartFile.getOriginalFilename())
                .purposes(reportPostDto.getPurposes()).behaviors(reportPostDto.getBehaviors())
                .build();

        softwareReport = softwareReportRepository.save(softwareReport);

        return softwareReport;
    }
}
