package ai.malwareClassification.service.reportSaveAndDownload;

import ai.malwareClassification.controller.softwareDetailsController.reqParamDto.PurposeReportDto;
import ai.malwareClassification.controller.softwareReportController.ReportPostDto;
import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareReport;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.repository.JpaSoftwareReportRepository;
import ai.malwareClassification.repository.JpaSoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.NoSuchElementException;

@RequiredArgsConstructor
@Slf4j
@Service
public class SaveReportService {

    private final JpaSoftwareRepository softwareRepository;

    private final JpaSoftwareReportRepository softwareReportRepository;

    @Transactional
    public SoftwareReport saveSoftwareReport(Long softwareId, ReportPostDto reportPostDto, User loginUser) {
        Software software = softwareRepository.findById(softwareId)
                .orElseThrow(() -> new NoSuchElementException("해당 id를 가진 software는 존재하지 않음"));

        SoftwareReport softwareReport = SoftwareReport.builder().software(software).uploader(loginUser)
                .title("").contents("").localstore_name("").file_name("")
                .isVirus(false).isWorm(false).isTrojan(false).isPup(false)
                .isDownloader(false).isDropper(false).isLauncher(false).isAdware(false).isSpyware(false).isRansomware(false).isBackdoor(false).isExploit(false).isBot(false).isScareware(false)
                .build();

        softwareReport = softwareReportRepository.save(softwareReport);

        return softwareReport;
    }

}
