package ai.malwareClassification.service.softwareAnalysisApi;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareApiReport;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.localStore.Json.JsonFileLocalStoreUtils;
import ai.malwareClassification.repository.JpaApiReportRepository;
import ai.malwareClassification.repository.SoftwareRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.reactive.function.client.WebClient;

@RequiredArgsConstructor
@Slf4j
@Service
public class SoftwareAnalysisApiService {
    private final SoftwareRepository softwareRepository;
    private final JsonFileLocalStoreUtils jsonFileLocalStoreUtils;
    private final JpaApiReportRepository jpaApiReportRepository;


    @Transactional
    public ApiOutput deepLearningAnalyze(Long id) {
        Software software = softwareRepository.findById(id).orElseThrow(() -> new EntityNotFoundException("엔티티가 존재하지 않음"));

        WebClient client = WebClient.builder()
                .baseUrl("http://localhost:8000")
                .defaultHeader(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_JSON_VALUE)
                .build();

        String localstoreName = software.getLocalstoreName();
        String apiRequest = "{\"localstoreName\":\""+ localstoreName +"\"}";

        ApiOutput apiOutput = client.post()
                .uri("/analyze")
                .accept(MediaType.APPLICATION_JSON)
                .bodyValue(apiRequest)
                .retrieve()
                .bodyToMono(ApiOutput.class)
                .block();

        String jsonFileName = jsonFileLocalStoreUtils.save(apiOutput);
        SoftwareApiReport softwareApiReport = SoftwareApiReport.builder().softwareId(software.getId()).apiName(apiOutput.getApiModelName()).reportName(jsonFileName).build();
        jpaApiReportRepository.save(softwareApiReport);

        return apiOutput;
    }
}
