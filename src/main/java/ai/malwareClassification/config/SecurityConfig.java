package ai.malwareClassification.config;

import ai.malwareClassification.config.auth.PrincipalDetailsService;
import ai.malwareClassification.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;

@RequiredArgsConstructor
@Configuration
@EnableWebSecurity // 스프링 시큐리티 필터가 스프링 필터체인에 등록 된다.
public class SecurityConfig extends WebSecurityConfigurerAdapter {
    private final UserRepository userRepository;

    @Bean
    public BCryptPasswordEncoder encodePwd() {
        return new BCryptPasswordEncoder();
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http.authorizeRequests()
                .antMatchers("/loginForm").permitAll()
                .antMatchers("/form").hasAuthority("ROLE_admin")
                .antMatchers("/newfile").hasAuthority("ROLE_admin")
                .antMatchers("/main/**").hasAnyRole("user", "admin")
                .antMatchers("/signature/**").hasAnyRole("user", "admin")
                .antMatchers("/join/**").hasAnyRole("admin")
                .antMatchers("/js/**").hasAnyRole("user", "admin")
                .and()

                .formLogin()
                .loginPage("/loginForm")
                .loginProcessingUrl("/login") // /login 주소가 호출이 되면 시큐리티가 낚아채서 대신 로그인을 진행해준다.
                .defaultSuccessUrl("/main")
                .and()

                .logout()
                .logoutUrl("/logout")
                .logoutSuccessUrl("/loginForm")
                .and()
                .csrf().disable();//csrf 비활성화
    }
    @Override
    public void configure(AuthenticationManagerBuilder auth) throws Exception {
        auth.userDetailsService(new PrincipalDetailsService(userRepository)).passwordEncoder(new BCryptPasswordEncoder());
    }
}
