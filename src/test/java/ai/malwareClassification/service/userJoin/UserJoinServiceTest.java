package ai.malwareClassification.service.userJoin;

import ai.malwareClassification.domain.User;
import ai.malwareClassification.repository.JpaUserRepository;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.transaction.annotation.Transactional;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

@Slf4j
@SpringBootTest
@Transactional
public class UserJoinServiceTest {

    @Autowired
    private UserJoinService userJoinService;
    @Autowired
    private JpaUserRepository jpaUserRepository;

    @Test
    void 회원가입_성공() {

        // 회원가입 회원 준비
        User user = User.builder()
                .username("tester")
                .password("")
                .employeeId("")
                .role("")
                .department("")
                .build();

        // 회원가입 서비스 실행
        userJoinService.createUser(user);

        // 회원가입 완료확인
        User savedUser = jpaUserRepository.findByUsername("tester").get();
        assertThat(savedUser.getUsername()).isEqualTo(user.getUsername());
    }

    @Test
    void 회원가입_실패_유저네임중복() {

        // 회원가입 완료
        User user = User.builder()
                .username("tester")
                .password("")
                .employeeId("")
                .role("")
                .department("")
                .build();
        userJoinService.createUser(user);

        // 회원가입 회원 준비 (중복 username)
        User new_user = User.builder()
                .username("tester")
                .password("")
                .employeeId("")
                .role("")
                .department("")
                .build();

        // 중복으로 인한 예외
        assertThatThrownBy(() -> userJoinService.createUser(new_user))
                .isInstanceOf(DataIntegrityViolationException.class);

    }
}
