package ai.malwareClassification.service.ReportSaveAndDownload;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareReport;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.repository.JpaSoftwareReportRepository;
import ai.malwareClassification.repository.JpaSoftwareRepository;
import ai.malwareClassification.repository.JpaUserRepository;
import ai.malwareClassification.service.reportSaveAndDownload.FindReportService;
import ai.malwareClassification.service.reportSaveAndDownload.ReportPostDto;
import ai.malwareClassification.service.reportSaveAndDownload.SaveReportService;
import ai.malwareClassification.service.softwareSaveAndDownload.SoftwareSaveAndDownloadService;
import ai.malwareClassification.service.userJoin.UserJoinService;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

@Slf4j
@SpringBootTest
@Transactional
public class FindReportServiceTest {

    @Autowired
    private FindReportService findReportService;
    @Autowired
    private JpaSoftwareRepository jpaSoftwareRepository;
    @Autowired
    private JpaUserRepository jpaUserRepository;
    @Autowired
    private JpaSoftwareReportRepository jpaSoftwareReportRepository;

    @Test
    void 보고서_찾음() {

        // 회원가입된 회원, 보고서postDto 준비
        User user = User.builder()
                .username("tester")
                .password("")
                .employeeId("")
                .role("")
                .department("")
                .build();
        jpaUserRepository.save(user);

        Software software = Software.builder()
                .uploader(user)
                .signature("")
                .localstoreName("")
                .filename("")
                .nickname("")
                .build();
        jpaSoftwareRepository.save(software);

        SoftwareReport softwareReport = SoftwareReport.builder()
                .software(software)
                .behaviors("")
                .purposes("")
                .title("title")
                .contents("")
                .uploader(user)
                .localstoreName("")
                .filename("")
                .build();
        jpaSoftwareReportRepository.save(softwareReport);

        SoftwareReport savedSoftwareReport = findReportService.findReport(softwareReport.getId());

        assertThat(savedSoftwareReport.getTitle()).isEqualTo("title");
    }

    @Test
    void 보고서_못찾음() {

        // 중복으로 인한 예외
        assertThatThrownBy(() -> findReportService.findReport(1L))
                .isInstanceOf(EntityNotFoundException.class);
    }
}
