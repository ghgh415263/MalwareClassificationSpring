package ai.malwareClassification.service.ReportSaveAndDownload;

import ai.malwareClassification.domain.Software;
import ai.malwareClassification.domain.SoftwareReport;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.exception.EntityNotFoundException;
import ai.malwareClassification.repository.JpaSoftwareRepository;
import ai.malwareClassification.repository.JpaUserRepository;
import ai.malwareClassification.service.reportSaveAndDownload.FindReportService;
import ai.malwareClassification.service.reportSaveAndDownload.ReportPostDto;
import ai.malwareClassification.service.reportSaveAndDownload.SaveReportService;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.transaction.annotation.Transactional;

import java.io.File;
import java.util.ArrayList;

import static org.assertj.core.api.AssertionsForClassTypes.assertThat;
import static org.assertj.core.api.AssertionsForClassTypes.assertThatThrownBy;

@Slf4j
@SpringBootTest
@Transactional
public class SaveReportServiceTest {
    @Autowired
    private SaveReportService saveReportService;
    @Autowired
    private FindReportService findReportService;
    @Autowired
    private JpaSoftwareRepository jpaSoftwareRepository;
    @Autowired
    private JpaUserRepository jpaUserRepository;

    @Value("${report.store.dir}")
    private String reportStoreDir;

    @Test
    void 보고서저장_성공() {

        // 회원가입된 회원, 보고서postDto 준비
        User user = User.builder()
                .username("tester")
                .password("")
                .employeeId("")
                .role("")
                .department("")
                .build();
        jpaUserRepository.save(user);

        Software software = Software.builder()
                .uploader(user)
                .signature("")
                .localstoreName("")
                .filename("")
                .nickname("")
                .build();
        jpaSoftwareRepository.save(software);

        MockMultipartFile file = new MockMultipartFile("testfile","testfile.txt", null, new byte[1]);
        ReportPostDto reportPostDto = new ReportPostDto("title", "contents", new ArrayList<>(), new ArrayList<>(), file);

        SoftwareReport softwareReport = saveReportService.saveSoftwareReport(software.getId(), reportPostDto, user);

        log.info(reportStoreDir+softwareReport.getLocalstoreName());
        File f = new File(reportStoreDir+softwareReport.getLocalstoreName());
        boolean existsFile = false;
        if(f.exists()) {
            existsFile = true;
            f.delete();
        }

        SoftwareReport savedSoftwareReport = findReportService.findReport(softwareReport.getId());

        assertThat(savedSoftwareReport.getTitle()).isEqualTo("title");
        assertThat(existsFile).isEqualTo(true);
    }

    @Test
    void 보고서저장_소프트웨어없음() {
        User user = User.builder()
                .username("tester")
                .password("")
                .employeeId("")
                .role("")
                .department("")
                .build();
        jpaUserRepository.save(user);

        MockMultipartFile file = new MockMultipartFile("testfile","testfile.txt", null, new byte[1]);
        ReportPostDto reportPostDto = new ReportPostDto("title", "contents", new ArrayList<>(), new ArrayList<>(), file);

        assertThatThrownBy(() -> saveReportService.saveSoftwareReport(1L, reportPostDto, user))
                .isInstanceOf(EntityNotFoundException.class);
    }


}
