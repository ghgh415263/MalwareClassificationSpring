package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.dto.NewfileDTO;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.repository.JpaSoftwareRepository;
import ai.malwareClassification.repository.JpaUserRepository;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileInputStream;

@SpringBootTest
@Transactional
public class MyServiceTest {

    @Autowired
    MyService myService;
    @Autowired
    JpaSoftwareRepository jpaSoftwareRepository;
    @Autowired
    JpaUserRepository jpaUserRepository;

    private User tmp_join(){
        User user = new User();
        user.setUsername("test");
        user.setPassword("$2a$10$JcZNY/v4UcOcrJrOPfBMZ.ov8Gyrdpi7Wlj/mQc29ZRIaon8QHZBm");
        user.setRole("ADMIN");
        user.setDepartment("ANALYSIS");
        jpaUserRepository.save(user);

        return user;
    }

    private NewfileDTO tmp_newfileDTO() throws Exception{
        MultipartFile multipartFile = new MockMultipartFile("test_file.txt","test_file.txt",null, new FileInputStream(new File("C:/Users/ghgh4/OneDrive/Desktop/test/test_file.txt")));
        NewfileDTO newfileDTO = new NewfileDTO(multipartFile);
        return newfileDTO;
    }

    @Test
    void saveSignatureAndFile_세이브() throws Exception{
        //GIVEN
        User user = tmp_join();
        MultipartFile multipartFile = new MockMultipartFile("test_file.txt","test_file.txt",null, new FileInputStream(new File("C:/Users/ghgh4/OneDrive/Desktop/test/test_file.txt")));
        String signature = myService.createSignature(multipartFile);
        PrincipalDetails userDetails = new PrincipalDetails(user);
        NewfileDTO newfileDTO = new NewfileDTO(multipartFile);

        //WHEN
        SaveSignatureAndFileDTO saveSignatureAndFileDTO = myService.saveSignatureAndFile(newfileDTO, userDetails);

        //THEN
        Assertions.assertEquals(false, saveSignatureAndFileDTO.isInDB());
        Assertions.assertEquals(signature, saveSignatureAndFileDTO.getSignature());
    }

    @Test
    void saveSignatureAndFile_중복() throws Exception{
        //GIVEN
        User user = tmp_join();
        MultipartFile multipartFile = new MockMultipartFile("test_file.txt", new FileInputStream(new File("C:/Users/ghgh4/OneDrive/Desktop/test/test_file.txt")));
        String signature = myService.createSignature(multipartFile);
        PrincipalDetails userDetails = new PrincipalDetails(user);
        NewfileDTO newfileDTO = new NewfileDTO(multipartFile);
        myService.saveSignatureAndFile(newfileDTO, userDetails);

        //WHEN
        SaveSignatureAndFileDTO saveSignatureAndFileDTO = myService.saveSignatureAndFile(newfileDTO, userDetails);

        //THEN
        Assertions.assertEquals(true, saveSignatureAndFileDTO.isInDB());
        Assertions.assertEquals(signature, saveSignatureAndFileDTO.getSignature());
    }

    @Test
    void deleteSignature() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);

        myService.saveSignatureAndFile(newfileDTO, userDetails);

        //WHEN
        myService.deleteSignature(signature, "test_file.txt");

        //THEN
        ResourceNotFoundException e = Assertions.assertThrows(ResourceNotFoundException.class, ()-> myService.ViewSoftwareBySignature(signature));
        Assertions.assertEquals(e.getMessage(), "해당 시그니처는 존재하지 않음");
    }


    @Test
    void ViewSoftwareBySignature_찾음() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSignatureAndFile(newfileDTO, userDetails);

        //WHEN
        SoftwareFullInfoDTO softwareFullInfoDTO = myService.ViewSoftwareBySignature(signature);

        //THEN
        Assertions.assertEquals("test_file.txt", softwareFullInfoDTO.getFirst_name());
    }

    @Test
    void ViewSoftwareBySignature_못찾음() throws Exception{
        //GIVEN

        //WHEN

        //THEN
        ResourceNotFoundException e = Assertions.assertThrows(ResourceNotFoundException.class, ()-> myService.ViewSoftwareBySignature("5a82d65c22100b50969cd9a6ca92a4ff"));
        Assertions.assertEquals(e.getMessage(), "해당 시그니처는 존재하지 않음");
    }

}
