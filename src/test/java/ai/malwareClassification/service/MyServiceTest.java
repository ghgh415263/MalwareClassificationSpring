package ai.malwareClassification.service;

import ai.malwareClassification.config.auth.PrincipalDetails;
import ai.malwareClassification.controller.fileDetails.resParamDTO.SoftwareAndReportDTO;
import ai.malwareClassification.domain.SoftwareBehavior;
import ai.malwareClassification.domain.SoftwarePurpose;
import ai.malwareClassification.domain.User;
import ai.malwareClassification.exception.ResourceNotFoundException;
import ai.malwareClassification.repository.JpaSoftwareRepository;
import ai.malwareClassification.repository.JpaUserRepository;
import org.apache.commons.io.FileUtils;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

@SpringBootTest
@Transactional
public class MyServiceTest {

    private final LocalStorage projectPath = new LocalStorage();
    @Autowired
    MyService myService;
    @Autowired
    JpaSoftwareRepository jpaSoftwareRepository;
    @Autowired
    JpaUserRepository jpaUserRepository;

    private User tmp_join(){
        User user = new User();
        user.setUsername("fileDir/test");
        user.setPassword("$2a$10$JcZNY/v4UcOcrJrOPfBMZ.ov8Gyrdpi7Wlj/mQc29ZRIaon8QHZBm");
        user.setRole("ADMIN");
        user.setDepartment("ANALYSIS");
        jpaUserRepository.save(user);

        return user;
    }

    private NewfileDTO tmp_newfileDTO() throws Exception{
        MultipartFile multipartFile = new MockMultipartFile("file_test.txt","file_test.txt",null, new FileInputStream(new File(projectPath.getTest_file_path())));
        NewfileDTO newfileDTO = new NewfileDTO(multipartFile);
        return newfileDTO;
    }

    private NewfileDTO purpose_newfileDTO() throws Exception{
        MultipartFile multipartFile = new MockMultipartFile("file_test.txt","file_test.txt",null, new FileInputStream(new File(projectPath.getPurpose_test_file_path())));
        NewfileDTO newfileDTO = new NewfileDTO(multipartFile);
        return newfileDTO;
    }

    private NewfileDTO behavior_newfileDTO() throws Exception{
        MultipartFile multipartFile = new MockMultipartFile("file_test.txt","file_test.txt",null, new FileInputStream(new File(projectPath.getBehavior_test_file_path())));
        NewfileDTO newfileDTO = new NewfileDTO(multipartFile);
        return newfileDTO;
    }

    private boolean isEqual(File firstFile, File secondFile) //같은 파일인지 비교
    {
        try {
            return FileUtils.contentEquals(firstFile, secondFile);
        } catch (IOException e)
        {
            e.printStackTrace();
            return false;
        }
    }

    @Test
    void saveSignatureAndFile_세이브() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);

        //WHEN
        SaveSignatureAndFileDTO saveSignatureAndFileDTO = myService.saveSoftwareAndFile(newfileDTO, userDetails);

        //THEN
        Assertions.assertEquals(false, saveSignatureAndFileDTO.isInDB());
        Assertions.assertEquals(signature, saveSignatureAndFileDTO.getSignature());
    }

    @Test
    void saveSignatureAndFile_중복() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSoftwareAndFile(newfileDTO, userDetails);

        //WHEN
        SaveSignatureAndFileDTO saveSignatureAndFileDTO = myService.saveSoftwareAndFile(newfileDTO, userDetails);

        //THEN
        Assertions.assertEquals(true, saveSignatureAndFileDTO.isInDB());
        Assertions.assertEquals(signature, saveSignatureAndFileDTO.getSignature());
    }

    @Test
    void deleteSignature() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);

        myService.saveSoftwareAndFile(newfileDTO, userDetails);

        //WHEN
        myService.deleteSignature(signature, "file_test.txt");
        ResourceNotFoundException e = Assertions.assertThrows(ResourceNotFoundException.class, ()-> myService.ViewSoftwareBySignature(signature));

        //THEN
        Assertions.assertEquals(e.getMessage(), "해당 시그니처는 존재하지 않음");
    }


    @Test
    void ViewSoftwareBySignature_찾음() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSoftwareAndFile(newfileDTO, userDetails);

        //WHEN
        SoftwareAndReportDTO softwareFullInfoDTO = myService.ViewSoftwareBySignature(signature);

        //THEN
        Assertions.assertEquals("file_test.txt", softwareFullInfoDTO.getFirst_name());
    }

    @Test
    void ViewSoftwareBySignature_못찾음() throws Exception{
        //GIVEN

        //WHEN
        ResourceNotFoundException e = Assertions.assertThrows(ResourceNotFoundException.class, ()-> myService.ViewSoftwareBySignature("5a82d65c22100b50969cd9a6ca92a4ff"));

        //THEN
        Assertions.assertEquals(e.getMessage(), "해당 시그니처는 존재하지 않음");
    }


    @Test
    void PostPurpose_등록() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSoftwareAndFile(newfileDTO, userDetails);

        //WHEN
        NewfileDTO newfileDTO2 = purpose_newfileDTO();
        myService.PostPurpose(signature, "backdoor", newfileDTO2.getFile(), userDetails);

        //THEN
        List<SoftwarePurpose> purposes = jpaSoftwareRepository.purposesFindBySoftwareId(signature);
        Assertions.assertEquals(signature, purposes.get(0).getSignature());
    }

    @Test
    void PostPurpose_시그니처없음() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = purpose_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);

        //WHEN
        ResourceNotFoundException e = Assertions.assertThrows(ResourceNotFoundException.class, ()-> myService.PostPurpose(signature, "backdoor", newfileDTO.getFile(), userDetails));

        //THEN
        Assertions.assertEquals(e.getMessage(), "해당 시그니처는 존재하지 않음");
    }

    @Test
    void PostBehavior_등록() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSoftwareAndFile(newfileDTO, userDetails);

        //WHEN
        NewfileDTO newfileDTO2 = behavior_newfileDTO();
        myService.PostBehavior(signature, "virus", newfileDTO2.getFile(), userDetails);

        //THEN
        List<SoftwareBehavior> behaviors = jpaSoftwareRepository.behaviorsFindBySoftwareId(signature);
        Assertions.assertEquals(signature, behaviors.get(0).getSignature());
    }

    @Test
    void PostBehavior_시그니처없음() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);

        //WHEN
        ResourceNotFoundException e = Assertions.assertThrows(ResourceNotFoundException.class, ()-> myService.PostBehavior(signature, "virus", newfileDTO.getFile(), userDetails));

        //THEN
        Assertions.assertEquals(e.getMessage(), "해당 시그니처는 존재하지 않음");
    }

    @Test
    void DownloadPurposeReport_정상다운() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSoftwareAndFile(newfileDTO, userDetails);
        NewfileDTO newfileDTO2 = purpose_newfileDTO();
        myService.PostPurpose(signature, "backdoor", newfileDTO2.getFile(), userDetails);
        List<SoftwarePurpose> purposes = jpaSoftwareRepository.purposesFindBySoftwareId(signature);

        //WHEN
        Path filePath = Paths.get(purposes.get(0).getReport_path());
        Long id = purposes.get(0).getId();
        DownloadReportDTO downloadReportDTO = myService.DownloadPurposeReport(id);

        //THEN
        Assertions.assertEquals(downloadReportDTO.filename, filePath.getFileName().toString());
        File file = new File(purposes.get(0).getReport_path());

        Assertions.assertEquals(isEqual(file, downloadReportDTO.resource.getFile()), true);
    }

    @Test
    void DownloadPurposeReport_존재하지않는_리포트다운() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSoftwareAndFile(newfileDTO, userDetails);
        NewfileDTO newfileDTO2 = purpose_newfileDTO();
        myService.PostPurpose(signature, "backdoor", newfileDTO2.getFile(), userDetails);
        List<SoftwarePurpose> purposes = jpaSoftwareRepository.purposesFindBySoftwareId(signature);

        //WHEN
        Path filePath = Paths.get(purposes.get(0).getReport_path());
        Long id = purposes.get(0).getId();

        //THEN
        IllegalStateException e = Assertions.assertThrows(IllegalStateException.class, ()-> myService.DownloadPurposeReport(id+1));
        Assertions.assertEquals(e.getMessage(), "해당 파일은 존재하지 않음");
    }


    @Test
    void DownloadBehaviorReport_정상다운() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSoftwareAndFile(newfileDTO, userDetails);
        NewfileDTO newfileDTO2 = behavior_newfileDTO();
        myService.PostBehavior(signature, "virus", newfileDTO2.getFile(), userDetails);
        List<SoftwareBehavior> behaviors = jpaSoftwareRepository.behaviorsFindBySoftwareId(signature);

        //WHEN
        Path filePath = Paths.get(behaviors.get(0).getReport_path());
        Long id = behaviors.get(0).getId();
        DownloadReportDTO downloadReportDTO = myService.DownloadBehaviorReport(id);

        //THEN
        Assertions.assertEquals(downloadReportDTO.filename, filePath.getFileName().toString());
        File file = new File(behaviors.get(0).getReport_path());

        Assertions.assertEquals(isEqual(file, downloadReportDTO.resource.getFile()), true);
    }

    @Test
    void DownloadBehaviorReport_존재하지않는_리포트다운() throws Exception{
        //GIVEN
        User user = tmp_join();
        NewfileDTO newfileDTO = tmp_newfileDTO();
        String signature = myService.createSignature(newfileDTO.getFile());
        PrincipalDetails userDetails = new PrincipalDetails(user);
        myService.saveSoftwareAndFile(newfileDTO, userDetails);
        NewfileDTO newfileDTO2 = behavior_newfileDTO();
        myService.PostBehavior(signature, "virus", newfileDTO2.getFile(), userDetails);
        List<SoftwareBehavior> behaviors = jpaSoftwareRepository.behaviorsFindBySoftwareId(signature);

        //WHEN
        Path filePath = Paths.get(behaviors.get(0).getReport_path());
        Long id = behaviors.get(0).getId();

        //THEN
        IllegalStateException e = Assertions.assertThrows(IllegalStateException.class, ()-> myService.DownloadBehaviorReport(id+1));
        Assertions.assertEquals(e.getMessage(), "해당 파일은 존재하지 않음");
    }

}
